# Copyright (C) 2014-2022 Harold Grovesteen
#
# This file is part of SATK.
#
#     SATK is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     SATK is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with SATK.  If not, see <http://www.gnu.org/licenses/>.

# Other Notices
# ----- -------
#
# IBM and z/Architecture are registered trademarks of International Business Machines
# Corporation.

# IBM(R) z/Architecture(R) instructions in Machine Specification Language

# Include machine instruction formats
# Uses MSLPATH when searching for include files
include formats.msl
# z/Architecture extended mnemonic formats
#include zem-fmts.msl


cpu s390          # Generic z/Architecture CPU in ESA/390 Mode
    addrmax 31
    ccw CCW1
    psw PSWE390
    base s390-base s390-new s390-extended s390-new-extended s390-rel-extended s390-io
    features s390x-translate-2        # December, 2000
    features s390x-HFP-multiply-add   # October, 2001
    features s390x-msa                # June, 2003
    features s390x-vm

cpu s390x        # Generic z/Architecture CPU in z/Architecture Mode
    addrmax 64
    ccw CCW1
    psw PSWZ
    base s390-base s390x-base s390-extended s390-new-extended s390-rel-extended
    base s390-io
    features s390x-translate-2        # December, 2000
    features s390x-HFP-multiply-add   # October, 2001
    features s390x-dat-1              # June, 2003
    features s390x-long-distance      # June, 2003
    features s390x-msa                # June, 2003
    features s390x-reuse-asn          # May, 2004
    features s390x-translate-3        # May, 2004
    features s390x-dat-2              # September, 2005
    features s390x-ext-immed          # September, 2005
    features s390x-hfp-unnorm-ext     # September, 2005
    features s390x-stfle              # September, 2005
    features s390x-store-clock-fast   # September, 2005
    features s390x-tod-steering       # September, 2005
    features s390x-compare-swap-save  # April, 2007
    features s390x-dfp                # April, 2007
    features s390x-dfp-rounding       # April, 2007
    features s390x-extract-cpu-time   # April, 2007
    features s390x-fp-sign-handling   # April, 2007
    features s390x-fpr-gr-transfer    # April, 2007
    features s390x-IEEE-exception-sim # April, 2007
    features s390x-pfpo               # April, 2007
    features s390x-cfg-topology       # February, 2008
    features s390x-enh-dat-1          # February, 2008
    features s390x-exe-ext            # February, 2008
    features s390x-gen-inst-ext       # February, 2008
    features s390x-move-opt-spec      # February, 2008
    features s390x-parsing-enh        # February, 2008
    # SA22-7832-07, February, 2009, of PoO only instroduced the Fiber Channel
    # Extensions.  No new instructions were introduced with this version.  The major
    # change was to input/output control blocks and the new TCW support.
    features s390x-cpu-counter        # August, 2010         STFLE:67
    features s390x-cpu-sampling       # August, 2010         STFLE:68
    features s390x-distinct-operands  # August, 2010
    features s390x-fp-ext             # August, 2010
    features s390x-high-word          # August, 2010
    features s390-interlocked-access  # August, 2010
    features s390x-load-store-cond    # August, 2010
    features s390x-msa-3              # August, 2010
    features s390x-msa-4              # August, 2010
    features s390x-pop-count          # August, 2010
    features s390x-rrb-mult           # August, 2010
    features s390x-set-program-parms  # August, 2010
    features s390x-cons-trans-exe     # September, 2012
    features s390x-dfp-zoned-conv     # September, 2012
    features s390x-enh-dat-2          # September, 2012
    features s390x-exe-hint           # September, 2012
    features s390x-load-and-trap      # September, 2012
    features s390x-misc-inst-ext      # September, 2012
    features s390x-proc-assist        # September, 2012
    features s390x-trans-exe          # September, 2012
    features s390x-cpu-counter-mult   # March, 2015          STFLE:142
    features s390x-dfp-packed-conv    # March, 2015
    features s390x-load-store-cond-2  # March, 2015
    features s390x-load-zero-right    # March, 2015
    features s390x-msa-5              # March, 2015
    features s390x-store-hypervisor   # March, 2015          STFLE:74
    features s390x-vector             # March, 2015
    features s390x-guarded-storage    # September, 2017
    features s390x-insert-ref-bits-multiple  # September, 2017
    features s390x-msa-8              # September, 2017
    features s390x-misc-inst-ext-2    # September, 2017
    features s390x-test-ext-intrp     # September, 2017
    features s390x-vector-enh-fac-1   # September, 2017
    features s390x-vector-packed-1    # September, 2017
    features s390x-vector-2           # September, 2017
    features s390x-misc-inst-ext-3    # September, 2019
    features s390x-bear               # May, 2022
    features s390x-processor-activity # May, 2022
    features s390x-dat-protect        # May, 2022
    features s390x-deflate            # May, 2022
    features s390x-msa-9              # May, 2022
    features s390x-neural-network     # May, 2022
    features s390x-enhanced-sort      # May, 2022
    features s390x-vector-packed-2    # May, 2022
    features s390x-vm
    #
    # z/Architecture Extended Mnemonics (see zem-inst.msl)
    features s390x-em-04              # September, 2005 / May, 2022
    features s390x-em-06              # February, 2008
    features s390x-em-08              # August, 2010


# STANDARD INSTRUCTIONS FROM ESA/390 (see below for I/O instructions)
inst A      5A   RXA            # ADD (32)
inst AD     6A   RXA            # ADD NORMALIZED (LH)
inst ADB    ED1A RXE            # ADD (LB)
inst ADBR   B31A RRE            # ADD (LB)
inst ADR    2A   RR             # ADD NORMALIZED (LH)
inst AE     7A   RXA            # ADD NORMALIZED (SH)
inst AEB    ED0A RXE            # ADD (SB)
inst AEBR   B30A RRE            # ADD (SB)
inst AER    3A   RR             # ADD NORMALIZED (SH)
inst AH     4A   RXA            # ADD HALFWORD
inst AHI    A7A  RIA            # ADD HALFWORD IMMEDIATE
inst AL     5E   RXA            # ADD LOGICAL (32)
inst ALR    1E   RR             # ADD LOGICAL (32)
inst AP     FA   SSB            # ADD DECIMAL
inst AR     1A   RR             # ADD (32)
inst AU     7E   RXA            # ADD UNNORMALIZED (SH)
inst AUR    3E   RR             # ADD UNNORMALIZED (SH)
inst AW     6E   RXA            # ADD UNNORMALIZED (LH)
inst AWR    2E   RR             # ADD UNNORMALIZED (LH)
inst AXBR   B34A RRE            # ADD (EB)
inst AXR    36   RR             # ADD NORMALIZED (EH)
inst BAKR   B240 RRE            # BRANCH AND STACK
inst BAL    45   RXA            # BRANCH AND LINK
inst BALR   05   RR             # BRANCH AND LINK
inst BAS    4D   RXA            # BRANCH AND SAVE
inst BASSM  0C   RR             # BRANCH AND SAVE AND SET MODE
inst BASR   0D   RR             # BRANCH AND SAVE
inst BC     47   RXA            # BRANCH ON CONDITION
inst BCR    07   RR             # BRANCH ON CONDITION
inst BCT    46   RXA            # BRANCH ON COUNT (32)
inst BCTR   06   RR             # BRANCH ON COUNT (32)
inst BRAS   A75  RIB            # BRANCH RELATIVE AND SAVE
inst BRC    A74  RIC            # BRANCH RELATIVE ON CONDITION
inst BRCT   A76  RIB            # BRANCH RELATIVE ON COUNT
inst BSA    B25A RRE            # BRANCH AND SET AUTHORITY
inst BSG    B258 RRE            # BRANCH IN SUBSPACE GROUP
inst BSM    0B   RR             # BRANCH AND SET MODE
inst BXH    86   RSA            # BRANCH ON INDEX HIGH (32)
inst BRXH   84   RSI            # BRANCH RELATIVE ON INDEX HIGH
inst BRXLE  85   RSI            # BRANCH RELATIVE ON INDEX LOW OR EQUAL
inst BXLE   87   RSA            # BRANCH ON INDEX LOW OR EQUAL (32)
inst C      59   RXA            # COMPARE (32)
inst CD     69   RXA            # COMPARE (LH)
inst CDB    ED19 RXE            # COMPARE (LB)
inst CDBR   B319 RRE            # COMPARE (LB)
inst CDFBR  B395 RRE            # CONVERT FROM FIXED (LB<32)
inst CDFR   B3B5 RRE            # CONVERT FROM FIXED (LH<32)
inst CDR    29   RR             # COMPARE (LH)
inst CDS    BB   RSA            # COMPARE DOUBLE AND SWAP
inst CE     79   RXA            # COMPARE (SH)
inst CEB    ED09 RXE            # COMPARE (SB)
inst CEBR   B309 RRE            # COMPARE (SB)
inst CEFBR  B394 RRE            # CONVERT FROM FIXED (SB<32)
inst CEFR   B3B4 RRE            # CONVERT FROM FIXED (SH<32)
inst CER    39   RR             # COMPARE (SH)
inst CFC    B21A S0             # COMPARE AND FORM CODEWORD
inst CFDBR  B399 RRFG           # CONVERT TO FIXED (32<LB)
inst CFDR   B3B9 RRFG           # CONVERT TO FIXED (32<LH)
inst CFEBR  B398 RRFG           # CONVERT TO FIXED (32<SB)
inst CFER   B3B8 RRFG           # CONVERT TO FIXED (32<SH)
inst CFXBR  B39A RRFG           # CONVERT TO FIXED (32<EB)
inst CFXR   B3BA RRFG           # CONVERT TO FIXED (32<EH)
inst CH     49   RXA            # COMPARE HALFWORD
inst CHI    A7E  RIA            # COMPARE HALFWORD IMMEDIATE
inst CHSC   B25F RRE     PX     # CHANNEL SUBSYSTEM CALL
inst CKSM   B241 RRE            # CHECKSUM
inst CL     55   RXA            # COMPARE LOGICAL (32)
inst CLI    95   SI             # COMPARE LOGICAL (immediate)
inst CLC    D5   SSA            # COMPARE LOGICAL (character)
inst CLCL   0F   RR             # COMPARE LOGICAL LONG (character)
inst CLCLE  A9   RSA            # COMPARE LOGICAL LONG EXTENDED
inst CLM    BD   RSB            # COMPARE LOGICAL UNDER MASK
inst CLR    15   RR             # COMPARE LOGICAL (32)
inst CLST   B25D RRE            # COMPARE LOGICAL STRING
inst CMPSC  B263 RRE            # COMPRESSION CALL
inst CP     F9   SSB            # COMPARE DECIMAL
inst CPYA   B24D RRE            # COPY ACCESS
inst CR     19   RR             # COMPARE (32)
inst CS     BA   RSA            # COMPARE AND SWAP
inst CSP    B250 RRE     P      # COMPARE SWAP AND PURGE
inst CUSE   B257 RRE            # COMPARE UNTIL SUBSTRING EQUAL
inst CUTFU  B2A7 RRE            # CONVERT UTF-8 TO UNICODE
inst CUUTF  B2A6 RRE            # CONVERT UNICODE TO UTF-8
inst CVB    4F   RXA            # CONVERT TO BINARY (32)
inst CVD    4E   RXA            # CONVERT TO DECIMAL (32)
inst CXBR   B349 RRE            # COMPARE (EB)
inst CXFBR  B396 RRE            # CONVERT FROM FIXED (EB<32)
inst CXFR   B3B6 RRE            # CONVERT FROM FIXED (EH<32)
inst CXR    B369 RRE            # COMPARE (EH)
inst D      5D   RXA            # DIVIDE (32<64)
inst DD     6D   RXA            # DIVIDE (LH)
inst DDB    ED1D RXE            # DIVIDE (LB)
inst DDBR   B31D RRE            # DIVIDE (LB)
inst DE     7D   RXA            # DIVIDE (SH)
inst DEB    ED0D RXE            # DIVIDE (SB)
inst DEBR   B30D RRE            # DIVIDE (SB)
inst DER    3D   RR             # DIVIDE (SH)
inst DDR    2D   RR             # DIVIDE (LH)
inst DIAG   83   RSA     P      # DIAGNOSE
inst DIDBR  B35B RRFB2          # DIVIDE TO INTEGER (LB)
inst DIEBR  B353 RRFB2          # DIVIDE TO INTEGER (SB)
inst DP     FD   SSB            # DIVIDE DECIMAL
inst DR     1D   RR             # DIVIDE
inst DXBR   B34D RRE            # DIVIDE (EB)
inst DXR    B22D RRE            # DIVIDE (EH)
inst EAR    B24F RRE            # EXTRACT ACCESS
inst ED     DE   SSA            # EDIT
inst EDMK   DF   SSA            # EDIT AND MARK
inst EFPC   B38C RRE1           # EXTRACT FPC
inst EPAR   B226 RRE            # EXTRACT PRIMARY ADDRESS SPACE NUMBER
inst EREG   B249 RRE            # EXTRACT STACKED REGISTERS
inst ESAR   B227 RRE            # EXTRACT SECONARY ADDRESS SPACE NUMBER
inst ESTA   B24A RRE            # EXTRACT STACKED STATE
inst EX     44   RXA            # EXECUTE
inst FIDBR  B35F RRFG           # LOAD FP INTEGER (LB)
inst FIDR   B37F RRE            # LOAD FP INTEGER (LH)
inst FIEBR  B357 RRFG           # LOAD FP INTEGER (SB)
inst FIER   B377 RRE            # LOAD FP INTEGER (SH)
inst FIXBR  B347 RRFG           # LOAD FP INTEGER (EB)
inst FIXR   B367 RRE            # LOAD FP INTEGER (EH)
inst HDR    24   RR             # HALVE (LH)
inst HER    34   RR             # HALVE (SH)
inst IAC    B224 RRE            # INSERT ADDRESS SPACE CONTROL
inst IC     43   RXA            # INSERT CHARACTER
inst ICM    BF   RSB            # INSERT CHARACTER UNDER MASK
inst IPK    B20B S0      P      # INSERT PSW KEY
inst IPM    B222 RRE1           # INSERT PROGRAM MASK
inst IPTE   B221 RRFA2   P      # INVALIDATE PAGE TABLE ENTRY
inst ISKE   B229 RRE     P      # INSERT STORAGE KEY EXTENDED
inst IVSK   B223 RRE     P      # INSERT VIRTUAL STORAGE KEY
inst KDB    ED18 RXE            # COMPARE AND SIGNAL (LB)
inst KDBR   B318 RRE            # COMPARE AND SIGNAL (LB)
inst KEB    ED08 RXE            # COMPARE AND SIGNAL (SB)
inst KEBR   B308 RRE            # COMPARE AND SIGNAL (SB)
inst KXBR   B348 RRE            # COMPARE AND SIGNAL (EB)
inst L      58   RXA            # LOAD (32)
inst LA     41   RXA            # LOAD ADDRESS
inst LAE    51   RXA            # LOAD ADDRESS EXTENDED
inst LAM    9A   RSA            # LOAD ACCESS MULTIPLE
inst LASP   E500 SSE2    P      # LOAD ADDRESS SPACE CONTROL
inst LCDBR  B313 RRE            # LOAD COMPLEMENT (LB)
inst LCDR   23   RR             # LOAD COMPLEMENT (LH)
inst LCEBR  B303 RRE            # LOAD COMPLEMENT (SB)
inst LCER   33   RR             # LOAD COMPLEMENT (SH)
inst LCR    13   RR             # LOAD COMPLEMENT (32)
inst LCTL   B7   RSA     P      # LOAD CONTROL
inst LCXBR  B343 RRE            # LOAD COMPLEMENT (EB)
inst LCXR   B363 RRE            # LOAD COMPLEMENT (EH)
inst LD     68   RXA            # LOAD (LH)
inst LDE    ED24 RXE            # LOAD LENGTHENED (LH<SH)
inst LDEB   ED04 RXE            # LOAD LENGTHENED (LB<SB)
inst LDEBR  B304 RRE            # LOAD LENGTHENED (LB<SB)
inst LDER   B324 RRE            # LOAD LENGTHENED (LH<SH)
inst LDR    28   RR             # LOAD (LH)
inst LDXBR  B345 RRE            # LOAD ROUNDED (LB<EB)
inst LDXR   25   RR             # LOAD ROUNDED (LH<EH)
inst LE     78   RXA            # LOAD (SH)
inst LEDBR  B344 RRE            # LOAD ROUNDED (SB<LB)
inst LEDR   35   RR             # LOAD ROUNDED (SH<LH)
inst LER    38   RR             # LOAD (SH)
inst LEXBR  B346 RRE            # LOAD ROUNDED (SB<EB)
inst LEXR   B366 RRE            # LOAD ROUNDED (SH<EH)
inst LFPC   B29D S0             # LOAD FPC
inst LH     48   RXA            # LOAD HALFWORD
inst LHI    A78  RIA            # LOAD HALFWORD IMMEDIATE
inst LM     98   RSA            # LOAD MULTIPLE (32)
inst LNDBR  B311 RRE            # LOAD NEGATIVE (LB)
inst LNDR   21   RR             # LOAD NEGATIVE (LH)
inst LNEBR  B301 RRE            # LOAD NEGATIVE (SB)
inst LNER   31   RR             # LOAD NEGATIVE (SH)
inst LNR    11   RR             # LOAD NEGATIVE (32)
inst LNXBR  B341 RRE            # LOAD NEGATIVE (EB)
inst LNXR   B361 RRE            # LOAD NEGATIVE (EH)
inst LPDBR  B310 RRE            # LOAD POSITIVE (LB)
inst LPDR   20   RR             # LOAD POSITIVE (LH)
inst LPEBR  B300 RRE            # LOAD POSITIVE (SB)
inst LPER   30   RR             # LOAD POSITIVE (SH)
inst LPR    10   RR             # LOAD POSITIVE (32)
inst LPSW   8200 S0      P      # LOAD PROGRAM STATUS WORD
inst LPXBR  B340 RRE            # LOAD POSITIVE (EB)
inst LPXR   B360 RRE            # LOAD POSITIVE (EH)
inst LR     18   RR             # LOAD (32)
inst LRA    B1   RXA     P      # LOAD REAL ADDRESS
inst LRDR   25   RR             # LOAD ROUNDED (LH<EH)
inst LRER   35   RR             # LOAD ROUNDED (SH<LH)
inst LTDBR  B312 RRE            # LOAD AND TEXT (LB)
inst LTDR   22   RR             # LOAD AND TEST (LH)
inst LTEBR  B302 RRE            # LOAD AND TEST (SB)
inst LTER   32   RR             # LOAD AND TEST (SH)
inst LTR    12   RR             # LOAD AND TEST (32)
inst LTXBR  B342 RRE            # LOAD AND TEST (EB)
inst LTXR   B362 RRE            # LOAD AND TEST (EH)
inst LURA   B24B RRE     P      # LOAD USING REAL ADDRESS
inst LXD    ED25 RXE            # LOAD LENGTHENED (EH<LH)
inst LXDB   ED05 RXE            # LOAD LENGTHENED (EB<LB)
inst LXDBR  B305 RRE            # LOAD LENGTHENED (EB<LB)
inst LXDR   B325 RRE            # LOAD LENGTHENED (EH<LH)
inst LXE    ED26 RXE            # LOAD LENGTHENED (EH<SH)
inst LXEB   ED06 RXE            # LOAD LENGTHENED (EB<SB)
inst LXEBR  B306 RRE            # LOAD LENGTHENED (EB<SB)
inst LXER   B326 RRE            # LOAD LENGTHENED (EH<SH)
inst LXR    B365 RRE            # LOAD (E)
inst LZDR   B375 RRE1           # LOAD ZERO (L)
inst LZER   B374 RRE1           # LOAD ZERO (S)
inst LZXR   B376 RRE1           # LOAD ZERO (E)
inst M      5C   RXA            # MULTIPLY (64<32)
inst MADB   ED1E RXF            # MULTIPLY AND ADD (LB)
inst MADBR  B31E RRD            # MULTIPLY AND ADD (LB)
inst MAEB   ED0E RXF            # MULTIPLY AND ADD (SB)
inst MAEBR  B30E RRD            # MULTIPLY AND ADD (SB)
inst MC     AF   SI             # MONITOR CALL
inst MD     6C   RXA            # MULTIPLY (LH)
inst MDB    ED1C RXE            # MULTIPLY (LB)
inst MDBR   B31C RRE            # MULTIPLY (LB)
inst MDE    7C   RXA            # MULTIPLY (LH<SH)
inst MDEB   ED0C RXE            # MULTIPLY (LB<SB)
inst MDEBR  B30C RRE            # MULTIPLY (LB<SB)
inst MDER   3C   RR             # MULTIPLY (LH<SH)
inst MDR    2C   RR             # MULTIPLY (LH)
inst ME     7C   RXA            # MULTIPLY (SH)
inst MEE    ED37 RXE            # MULTIPLY (SH)
inst MEEB   ED17 RXE            # MULTIPLY (SB)
inst MEEBR  B317 RRE            # MULTIPLY (SB)
inst MEER   B337 RRE            # MULTIPLY (SH)
inst MER    3C   RR             # MULTIPLY (SH)
inst MH     4C   RXA            # MULTIPLY HALFWORD (32)
inst MHI    A7C  RIA            # MULTIPLY HALFWORD IMMEDIATE
inst MP     FC   SSB            # MULTIPLY DECIMAL
inst MR     1C   RR             # MULTIPLY (63<32)
inst MS     71   RXA            # MULTIPLY SINGLE
inst MSDB   ED1F RXF            # MULTIPLY AND SUBTRACT (LB)
inst MSDBR  B31F RRD            # MULTIPLY AND SUBTRACT (LB)
inst MSEB   ED0F RXF            # MULTIPLY AND SUBTRACT (SB)
inst MSEBR  B30F RRD            # MULTIPLY AND SUBTRACT (SB)
inst MSR    B252 RRE            # MULTIPLY SINGLE
inst MSTA   B247 RRE1           # MODIFY STACKED STATE
inst MVC    D2   SSA            # MOVE (character)
inst MVCDK  E50F SSE2           # MOVE WITH DESTINATION KEY
inst MVCIN  E8   SSA            # MOVE INVERSE
inst MVCK   D9   SSD            # MOVE WITH KEY
inst MVCL   0E   RR             # MOVE CHARACTER LONG
inst MVCLE  A8   RSA            # MOVE LONG EXTENDED
inst MVCP   DA   SSD            # MOVE TO PRIMARY
inst MVCS   DB   SSD            # MOVE TO SECONDARY
inst MVCSK  E50E SSE2           # MOVE WITH SOURCE KEY
inst MVI    92   SI             # MOVE (immediate)
inst MVN    D1   SSA            # MOVE NUMERICS
inst MVO    F1   SSB            # MOVE WITH OFFSET
inst MVPG   B254 RRE            # MOVE PAGE
inst MVST   B255 RRE            # MOVE STRING
inst MVZ    D3   SSA            # MOVE NUMERICS
inst MXBR   B34C RRE            # MULTIPLY (EB)
inst MXD    67   RXA            # MULTIPLY (EH<LH)
inst MXDB   ED07 RXE            # MULTIPLY (EB<LB)
inst MXDBR  B307 RRE            # MULTIPLY (EB<LB)
inst MXDR   27   RR             # MULTIPLY (EH<LH)
inst MXR    26   RR             # MULTIPLY (EH)
inst N      54   RXA            # AND (32)
inst NC     D4   SSA            # AND (character)
inst NI     94   SI             # AND (immediate)
inst NR     14   RR             # AND (32)
inst O      56   RXA            # OR (32)
inst OC     D6   SSA            # OR (character)
inst OI     96   SI             # OR (immediate)
inst OR     16   RR             # OR (32)
inst PACK   F2   SSB            # PACK
inst PALB   B248 RRE2           # PURGE ALB
inst PC     B218 S0             # PROGRAM CALL
inst PGIN   B22E RRE     P      # PAGE IN
inst PGOUT  B22F RRE     P      # PAGE OUT
inst PLO    EE   SSE1           # PERFORM LOCKED OPERATION
inst PR     0101 E              # PROGRAM RETURN
inst PT     B228 RRE     P      # PROGRAM TRANSFER
inst PTLB   B20D S0      P      # PURGE TLB
inst RP     B277 S0             # RESUME PROGRAM
inst RRBE   B22A RRE     P      # RESET REFERENCE BIT EXTENDED
inst S      5B   RXA            # SUBTRACT (32)
inst SAC    B219 S0      P      # SET ADDRESS SPACE CONTROL
inst SACF   B279 S0             # SET ADDRESS SPACE CONTROL FAST
inst SAR    B24E RRE            # SET ACCESS
inst SCK    B204 S0      P      # SET CLOCK
inst SCKC   B206 S0      P      # SET CLOCK COMPARATOR
inst SCKPF  0107 E       P      # SET CLOCK PROGRAMMABLE FIELD
inst SD     6B   RXA            # SUBTRACT NORMALIZED (LH)
inst SDB    ED1B RXE            # SUBTRACT (LB)
inst SDBR   B31B RRE            # SUBTRACT (LB)
inst SDR    2B   RR             # SUBTRACT NORMALIZED (LH)
inst SE     7B   RXA            # SUBTRACT NORMALIZED (SH)
inst SEB    ED0B RXE            # SUBTRACT (SB)
inst SEBR   B30B RRE            # SUBTRACT (SB)
inst SER    3B   RR             # SUBTRACT NORMALIZED (SH)
inst SERVC  B220 RRE     PX     # SERVICE CALL
inst SFPC   B384 RRE1           # SET FPC
inst SH     4B   RXA            # SUBTRACT HALFWORD
inst SIE    B214 S0      P      # START INTERPRETIVE EXECUTION
inst SIGP   AE   RSA     P      # SIGNAL PROCESSOR
inst SL     5F   RXA            # SUBTRACT LOGICAL (32)
inst SLA    8B   RSA1           # SHIFT LEFT SINGLE
inst SLDA   8F   RSA1           # SHIFT LEFT DOUBLE
inst SLDL   8D   RSA1           # SHIFT LEFT DOUBLE LOGICAL
inst SLL    89   RSA1           # SHIFT LEFT SINGLE LOGICAL (32)
inst SLR    1F   RR             # SUBTRACT LOGICAL (32)
inst SP     FB   SSB            # SUBTRACT DECIMAL
inst SPKA   B20A S0      P      # SET PSW KEY FROM ADDRESS
inst SPM    04   RR      P      # SET PROGRAM MASK
inst SPT    B208 S0      P      # SET CPU TIMER
inst SPX    B210 S0      P      # SET PREFIX
inst SR     1B   RR             # SUBTRACT (32)
inst SRA    8A   RSA1           # SHIFT RIGHT SINGLE
inst SRDA   8E   RSA1           # SHIFT RIGHT DOUBLE
inst SRDL   8C   RSA1           # SHIFT RIGHT DOUBLE LOGICAL
inst SRL    88   RSA1           # SHIFT RIGHT SINGLE LOGICAL (32)
inst SRP    F0   SSC            # SHIFT AND ROUND DECIMAL
inst SQD    ED35 RXE            # SQUARE ROOT (LH)
inst SQDB   ED15 RXE            # SQUARE ROOT (LB)
inst SQDBR  B315 RRE            # SQUARE ROOT (LB)
inst SQDR   B244 RRE            # SQUARE ROOT (LH)
inst SQE    ED34 RXE            # SQUARE ROOT (SH)
inst SQEB   ED14 RXE            # SQUARE ROOT (SB)
inst SQEBR  B314 RRE            # SQUARE ROOT (SB)
inst SQER   B245 RRE            # SQUARE ROOT (SH)
inst SQXBR  B316 RRE            # SQUARE ROOT (XB)
inst SQXR   B336 RRE            # SQUARE ROOT (EH)
inst SRNM   B299 S0             # SET ROUNDING MODE
inst SRST   B25E RRE            # SEARCH STRING
inst SSAR   B225 RRE            # SET SECONDARY ADDRESS SPACE NUMBER
inst SSKE   B22B RRFC    P      # SET STORAGE KEY EXTENDED
inst SSM    8000 S0      P      # SET SYSTEM MASK
inst ST     50   RXA            # STORE (32)
inst STAM   9B   RSA            # STORE ACCESS MULTIPLE
inst STAP   B212 S0      P      # STORE CPU ADDRESS
inst STC    42   RXA            # STORE CHARACTER
inst STCK   B205 S0      P      # STORE CLOCK
inst STCKE  B278 S0             # STORE CLOCK EXTENDED
inst STCKC  B207 S0      P      # STORE CLOCK COMPARATOR
inst STCM   BE   RSB            # STORE CHARACTERS UNDER MASK
inst STCTL  B6   RSA     P      # STORE CONTROL
inst STFPC  B29C S0             # STORE FPC
inst STPT   B209 S0      P      # STORE CPU TIMER
inst STH    40   RXA            # STORE HALFWORD
inst STIDP  B202 S0      P      # STORE PROCESSOR ID
inst STD    60   RXA            # STORE (L)
inst STE    70   RXA            # STORE (S)
inst STM    90   RSA            # STORE MULTIPLE (32)
inst STNSM  AC   SI      P      # STORE THEN AND SYSTEM MASK
inst STOSM  AD   SI      P      # STORE THEN OR SYSTEM MASK
inst STPX   B211 S0      P      # STORE PREFIX
inst STSI   B27D S0      P      # STORE SYSTEM INFORMATION
inst STURA  B246 RRE     P      # STORE USING REAL ADDRESS
inst SU     7F   RXA            # SUBTRACT UNNORMALIZED (SH)
inst SUR    3F   RR             # SUBTRACT UNNORMALIZED (SH)
inst SVC    0A   I              # SUPERVISOR CALL
inst SW     6F   RXA            # SUBTRACT UNNORMALIZED (LH)
inst SWR    2F   RR             # SUBTRACT UNNORMALIZED (LH)
inst SXBR   B34B RRE            # SUBTRACT (EB)
inst SXR    37   RR             # SUBTRACT NORMALIZED (EH)
inst TAR    B24C RRE            # TEST ACCESS
inst TB     B22C RRE     P      # TEST BLOCK
inst TBDR   B351 RRFG           # CONVERT HFP TO BFP (LB<LH)
inst TBEDR  B350 RRFG           # CONVERT HFP TO BFP (SB<LH)
inst TCDB   ED11 RXE            # TEST DATA CLASS (LB)
inst TCEB   ED10 RXE            # TEST DATA CLASS (SB)
inst TCXB   ED12 RXE            # TEST DATA CLASS (EB)
inst THDER  B358 RRE            # CONVERT BHP TO HFP (LH<SB)
inst THDR   B359 RRE            # CONVERT BHP TO HFP (LH<LB)
inst TM     91   SI             # TEST UNDER MASK
inst TMH    A70  RIAU           # TEST UNDER MASK HIGH
inst TML    A71  RIAU           # TEST UNDER MASK LOW
inst TPROT  E501 SSE2    P      # TEST PROTECTION
inst TR     DC   SSA            # TRANSLATE
inst TRE    B2A5 RRE            # TRANSLATE EXTENDED
inst TRACE  99   RSA            # TRACE
inst TRAP2  01FF E              # TRAP (two-byte)
inst TRAP4  B2FF S0             # TRAP (four-byte)
inst TRT    DD   SSA            # TRANSLATE AND TEST
inst TS     9300 S0             # TEST AND SET
inst UNPK   F3   SSB            # UNPACK
inst UPT    0102 E              # UPDATE TREE
inst X      57   RXA            # EXCLUSIVE OR (32)
inst XC     D7   SSA            # EXCLUSIVE OR (character)
inst XI     97   SI             # EXCLUSIVE OR (immediate)
inst XR     17   RR             # EXCLUSIVE OR (32)
inst ZAP    F8   SSB            # ZERO AND ADD

# NEW INSTRUCTIONS WITH Z/ARCHITECTURE
inst AG     E308 RXYA           # ADD (64)
inst AGF    E318 RXYA           # ADD (64<32)
inst AGFR   B918 RRE            # ADD (64<32)
inst AGHI   A7B  RIA            # ADD HALFWORD IMMEDIATE (64)
inst AGR    B908 RRE            # ADD (64)
inst ALC    E398 RXYA           # ADD LOGICAL WITH CARRY (32)
inst ALCG   E388 RXYA           # ADD LOGICAL WITH CARRY (64)
inst ALCGR  B988 RRE            # ADD LOGICAL WITH CARRY (64)
inst ALCR   B998 RRE            # ADD LOGICAL WITH CARRY (32)
inst ALG    E30A RXYA           # ADD LOGICAL (64)
inst ALGF   E31A RXYA           # ADD LOGICAL (64<32)
inst ALGFR  B91A RRE            # ADD LOGICAL (64<32)
inst ALGR   B90A RRE            # ADD LOGICAL (64)
inst BCTG   E346 RXYA           # BRANCH ON COUNT (64)
inst BCTGR  B946 RRE            # BRANCH ON COUNT (64)
inst BRASL  C05  RILB           # BRANCH RELATIVE AND SAVE LONG
inst BRCL   C04  RILC           # BRANCH RELATIVE ON CONDITION LONG
inst BRCTG  A77  RIB            # BRANCH RELATIVE ON COUNT (64)
inst BRXHG  EC44 RIEE           # BRANCH RELATIVE ON INDEX HIGH (64)
inst BRXLG  EC45 RIEE           # BRANCH RELATIVE ON INDEX LOW OR HIGH (64)
inst BXHG   EB44 RSYA           # BRANCH ON INDEX HIGH (64)
inst BXLEG  EB45 RSYA           # BRANCH ON INDEX LOW OR EQUAL (64)
inst CDGBR  B3A5 RRE            # CONVERT FROM FIXED (LB<64)
inst CDGR   B3C5 RRE            # CONVERT FROM FIXED (LH<64)
inst CDSG   EB3E RSYA           # COMPARE DOUBLE AND SWAP (64)
inst CEGBR  B3A4 RRE            # CONVERT FROM FIXED (SB<64)
inst CEGR   B3C4 RRE            # CONVERT FROM FIXED (SH<64)
inst CG     E320 RXYA           # COMPARE (64)
inst CGDBR  B3A9 RRFG           # CONVERT TO FIXED (64<LB)
inst CGDR   B3C9 RRFG           # CONVERT TO FIXED (64<LH)
inst CGEBR  B3A8 RRFG           # CONVERT TO FIXED (64<SB)
inst CGER   B3C8 RRFG           # CONVERT TO FIXED (64<SH)
inst CGF    E330 RXYA           # COMPARE (64<32)
inst CGFR   B930 RRE            # COMPARE (64<32)
inst CGHI   A7F  RIA            # COMPARE HALFWORD IMMEDIATE (64)
inst CGR    B920 RRE            # COMPARE (64)
inst CGXBR  B3AA RRFG           # CONVERT TO FIXED (64<EB)
inst CGXR   B3CA RRFG           # CONVERT TO FIXED (64<EB)
inst CLG    E321 RXYA           # COMPARE LOGICAL (64)
inst CLGF   E331 RXYA           # COMPARE LOGICAL (64<32)
inst CLGFR  B931 RRE            # COMPARE LOGICAL (64<32)
inst CLGR   B921 RRE            # COMPARE LOGICAL (64)
inst CLMH   EB20 RSC            # COMPARE LOGICAL UNDER MASK (HIGH)
inst CSG    EB30 RSYA           # COMPARE AND SWAP (64)
inst CVBG   E30E RXYA           # CONVERT TO BINARY (64)
inst CVDG   E32E RXYA           # CONVERT TO DECIMAL (64)
inst CXGBR  B3A6 RRE            # CONVERT FROM FIXED (EB<64)
inst CXGR   B3C6 RRE            # CONVERT FROM FIXED (EH<64)
inst DL     E397 RXYA           # DIVIDE LOGICAL (32<64)
inst DLG    E387 RXYA           # DIVIDE LOGICAL (64<128)
inst DLGR   B987 RRE            # DIVIDE LOGICAL (64<128)
inst DLR    B997 RRE            # DIVIDE LOGICAL (32<64)
inst DSG    E30D RXYA           # DIVIDE SINGLE (64)
inst DSGF   E31D RXYA           # DIVIDE SINGLE (64<32)
inst DSGFR  B91D RRE            # DIVIDE SINGLE (64<32)
inst DSGR   B90D RRE            # DIVIDE SINGLE (64)
inst EPSW   B98D RRE            # EXTRACT PSW
inst EREGG  B90E RRE            # EXTRACT STACKED REGISTERS (64)
inst ESEA   B99D RRE1    P      # EXTRACT AND SET EXTENDED AUTHORITY
inst ICMH   EB80 RSC            # INSERT CHARACTERS UNDER MASK (HIGH)
inst IIHH   A50  RIAU           # INSERT IMMEDIATE (HIGH HIGH)
inst IIHL   A51  RIAU           # INSERT IMMEDIATE (HIGH LOW)
inst IILH   A52  RIAU           # INSERT IMMEDIATE (LOW HIGH)
inst IILL   A53  RIAU           # INSERT IMMEDIATE (LOW LOW)
inst LARL   C00  RILB           # LOAD ADDRESS RELATIVE LONG
inst LCGFR  B913 RRE            # LOAD COMPLEMENT (64<32)
inst LCGR   B903 RRE            # LOAD COMPLEMENT (64)
inst LCTLG  EB2F RSA2    P      # LOAD CONTROL (64)
inst LG     E304 RXYA           # LOAD (64)
inst LGF    E314 RXYA           # LOAD (64<32)
inst LGFR   B914 RRE            # LOAD (64<32)
inst LGH    E315 RXYA           # LOAD HALFWORD (64)
inst LGHI   A79  RIA            # LOAD HALFWORD IMMEDIATE (64)
inst LGR    B904 RRE            # LOAD (64)
inst LLGC   E390 RXYA           # LOAD LOGICAL CHARACTER
inst LLGF   E316 RXYA           # LOAD LOGICAL (64<32)
inst LLGFR  B916 RRE            # LOAD LOGICAL (64<32)
inst LLGH   E391 RXYA           # LOAD LOGICAL HALFWORD
inst LLGT   E317 RXYA           # LOAD LOGICAL THIRTY ONE BITS
inst LLGTR  B917 RRE            # LOAD LOGICAL THIRTY ONE BITS
inst LLIHH  A5C  RIAU           # LOAD LOGICAL IMMEDIATE (HIGH HIGH)
inst LLIHL  A5D  RIAU           # LOAD LOGICAL IMMEDIATE (HIGH LOW)
inst LLILH  A5E  RIAU           # LOAD LOGICAL IMMEDIATE (LOW HIGH)
inst LLILL  A5F  RIAU           # LOAD LOGICAL IMMEDIATE (LOW LOW)
inst LMD    EF   SSE1           # LOAD DISJOINT
inst LMG    EB04 RSA2           # LOAD MULTIPLE (64)
inst LMH    EB96 RSA2           # LOAD MULTIPLE HIGH
inst LNGFR  B911 RRE            # LOAD NEGATIVE (64<32)
inst LNGR   B901 RRE            # LOAD NEGATIVE (64)
inst LPGFR  B910 RRE            # LOAD POSITIVE (64<32)
inst LPGR   B900 RRE            # LOAD POSITIVE (64)
inst LPQ    E38F RXYA           # LOAD PAIR FROM QUADWORD
inst LPSWE  B2B2 S0      P      # LOAD PSW EXTENDED
inst LRAG   E303 RXYA    P      # LOAD REAL ADDRESS (64)
inst LRV    E31E RXYA           # LOAD REVERSED (32)
inst LRVG   E30F RXYA           # LOAD REVERSED (64)
inst LRVGR  B90F RRE            # LOAD REVERSED (64)
inst LRVH   E31F RXYA           # LOAD REVERSED (16)
inst LRVR   B91F RRE            # LOAD REVERSED (32)
inst LTGFR  B912 RRE            # LOAD AND TEST (64<32)
inst LTGR   B902 RRE            # LOAD AND TEXT (64)
inst LURAG  B905 RRE     P      # LOAD USING REAL ADDRESS (64)
inst MGHI   A7D  RIA            # MULTIPLY HALFWORD IMMEDIATE (64)
inst ML     E396 RXYA           # MULTIPLY LOGICAL (64<32)
inst MLG    E386 RXYA           # MULTIPLY LOGICAL (128<64)
inst MLGR   B986 RRE            # MULTIPLY LOGICAL (128<64)
inst MLR    B996 RRE            # MULTIPLY LOGICAL (64<32)
inst MSG    E30C RXYA           # MULTIPLY SINGLE (64)
inst MSGF   E31C RXYA           # MULTIPLY SINGLE (64<32)
inst MSGFR  B91C RRE            # MULTIPLY SINGLE (64<32)
inst MSGR   B90C RRE            # MULTIPLY SINGLE (64)
inst NG     E380 RXYA           # AND (64)
inst NGR    B980 RRE            # AND (64)
inst NIHH   A54  RIAU           # AND IMMEDIATE (HIGH HIGH)
inst NIHL   A55  RIAU           # AND IMMEDIATE (HIGH LOW)
inst NILH   A56  RIAU           # AND IMMEDIATE (LOW HIGH)
inst NILL   A57  RIAU           # AND IMMEDIATE (LOW LOW)
inst OG     E381 RXYA           # OR (64)
inst OGR    B981 RRE            # OR (64)
inst OIHH   A58  RIAU           # OR IMMEDIATE (HIGH HIGH)
inst OIHL   A59  RIAU           # OR IMMEDIATE (HIGH LOW)
inst OILH   A5A  RIAU           # OR IMMEDIATE (LOW HIGH)
inst OILL   A5B  RIAU           # OR IMMEDIATE (LOW LOW)
inst RLL    EB1D RSA2           # ROTATE LEFT SINGLE LOGICAL (32)
inst RLLG   EB1C RSA2           # ROTATE LEFT SINGLE LOGICAL (64)
inst SAM24  010C E              # SET ADDRESSING MODE (24)
inst SAM31  010D E              # SET ADDRESSING MODE (31)
inst SAM64  010E E              # SET ADDRESSING MODE (64)
inst SG     E309 RXYA           # SUBTRACT (64)
inst SGF    E319 RXYA           # SUBTRACT (64<32)
inst SGFR   B919 RRE            # SUBTRACT (64<32)
inst SGR    B909 RRE            # SUBTRACT (64)
inst SLAG   EB0B RSA2           # SHIFT LEFT SINGLE (64)
inst SLB    E399 RXYA           # SUBTRACT LOGICAL WITH BORROW (32)
inst SLBG   E389 RXYA           # SUBTRACT LOGICAL WITH BORROW (64)
inst SLBGR  B989 RRE            # SUBTRACT LOGICAL WITH BORROW (64)
inst SLBR   B999 RRE            # SUBTRACT LOGICAL WITH BORROW (32)
inst SLG    E30B RXYA           # SUBTRACT LOGICAL (64)
inst SLGF   E31B RXYA           # SUBTRACT LOGICAL (64<32)
inst SLGFR  B91B RRE            # SUBTRACT LOGICAL (G4<32)
inst SLGR   B90B RRE            # SUBTRACT LOGICAL (64)
inst SLLG   EB0D RSA2           # SHIFT LEFT SINGLE LOGICAL (64)
inst SRAG   EB0A RSA2           # SHIFT RIGHT SINGLE (64)
inst SRLG   EB0C RSA2           # SHIFT RIGHT SINGLE LOGICAL (64)
inst STCMH  EB2C RSC            # STORE CHARACTERS UNDER MASK (HIGH)
inst STCTG  EB25 RSA2           # STORE CONTROL (64)
inst STFL   B2B1 S0      P      # STORE FACILITY LIST
inst STG    E324 RXYA           # STORE (64)
inst STMG   EB24 RSA2           # STORE MULTIPLE (64)
inst STMH   EB26 RSA2           # STORE MULTIPLE HIGH
inst STPQ   E38E RXYA           # STORE PAIR TO QUADWORD
inst STRAG  E502 SSE2    P      # STORE REAL ADDRESS (64)
inst STRV   E33E RXYA           # STORE REVERSED (32)
inst STRVG  E32F RXYA           # STORE REVERSED (64)
inst STRVH  E33F RXYA           # STORE REVERSED (16)
inst STURG  B925 RRE            # STORE USING REAL ADDRESS (64)
inst TAM    010B E              # TEST ADDRESSING MODE
inst TMHH   A72  RIAU           # TEST UNDER MASK (HIGH HIGH)
inst TMHL   A73  RIAU           # TEST UNDER MASK (HIGH LOW)
inst TMLH   A70  RIAU           # TEST UNDER MASK (LOW HIGH) same as TMH
inst TMLL   A71  RIAU           # TEST UNDER MASK (LOW LOW) same as TML
inst TRACG  EB0F RSA2    P      # TRACE (64)
inst XG     E382 RXYA           # EXCLUSIVE OR (64)
inst XGR    B982 RRE            # EXCLUSIVE OR (64)

# INPUT/OUTPUT INSTRUCTIONS
inst CSCH   B230 S0      P      # CLEAR SUBCHANNEL
inst HSCH   B231 S0      P      # HALT SUBCHANNEL
inst MSCH   B232 S0      P      # MODIFY SUBCHANEL
inst RCHP   B23B S0      P      # RESET CHANNEL PATH
inst RSCH   B238 S0      P      # RESUME SUBCHANNEL
inst SAL    B237 S0      P      # SET ADDRESS LIMIT
inst SCHM   B23C S0      P      # SET CHANNEL MONITOR
inst SSCH   B233 S0      P      # START SUBCHANNEL
inst STCPS  B23A S0      P      # STORE CHANNEL PATH STATUS
inst STCRW  B239 S0      P      # STORE CHANNEL REPORT WORD
inst STSCH  B234 S0      P      # STORE SUBCHANNEL
inst TPI    B236 S0      P      # TEST PENDING INTERRUPTION
inst TSCH   B235 S0      P      # TEST SUBCHANNEL
inst XSCH   B276 RRE1    P      # CANCEL SUBCHANNE

# STANDARD EXTENDED MNEMONICS
inst B      47F  ERXB    E      # BC  15,D1(X1,B1)  Unconditional branch
inst BE     478  ERXB    E      # BC  8,D1(X1,B1)   Branch on A equal B
inst BER    078  ER      E      # BCR 8,R           Branch on A equal B (reg)
inst BH     472  ERXB    E      # BC  2,D1(X1,B1)   Branch on A higher than B
inst BHR    072  ER      E      # BCR 2,R           Branch on A higher than B (reg)
inst BL     474  ERXB    E      # BC  4,D1(X1,B1)   Branch on A lower than B
inst BLR    074  ER      E      # BCR 4,R           Branch on A lower than B (reg)
inst BM     474  ERXB    E      # BC  4,D1(X1,B1)   Branch on Minus or Mixed
inst BMR    074  ER      E      # BCR 4,R           Branch on Minus or Mixed (reg)
inst BNE    477  ERXB    E      # BC  7,D1(X1,B1)   Branch on A not equal B
inst BNER   077  ER      E      # BCR 8,R           Branch on A not equal B (reg)
inst BNH    47D  ERXB    E      # BC  13,D1(X1,B1)  Branch on A not higher than B
inst BNHR   07D  ER      E      # BCR 13,R          Branch on A not higher than B (reg)
inst BNL    47B  ERXB    E      # BC  11,D1(X1,B1)  Branch on A not lower than B
inst BNLR   07B  ER      E      # BCR 11,R          Branch on A not lower than B (reg)
inst BNM    47B  ERXB    E      # BC  11,D1(X1,B1)  Branch on not minus or not mixed
inst BNMR   07B  ER      E      # BC  11,R          Branch on not minur or not mixed (reg)
inst BNO    47E  ERXB    E      # BC  14,D1(X1,B1)  Branch on no overflow or not ones
inst BNOR   07E  ER      E      # BCR 14,R          Branch on no overflow or not ones (reg)
inst BNP    47D  ERXB    E      # BC  13,D1(X1,B1)  Branch on not plus
inst BNPR   07D  ER      E      # BCR 13,R          Branch on not plus (reg)
inst BNZ    477  ERXB    E      # BC  7,D1(X1,B1)   Branch on not zero or zeros
inst BNZR   077  ER      E      # BCR 7,R           Branch on not zero or zeros (reg)
inst BO     471  ERXB    E      # BC  1,D1(X1,B1)   Branch on overflow or ones
inst BOR    071  ER      E      # BCR 1,R           Branch on overflow or ones (reg)
inst BP     472  ERXB    E      # BC  2,D1(X1,B1)   Branch on plus
inst BPR    072  ER      E      # BCR 2,R           Branch on plus (reg)
inst BR     07F  ER      E      # BCR 15,R          Unconditional branch (reg)
inst BZ     478  ERXB    E      # BC  8,D1(X1,B1)   Branch on zero or zeros
inst BZR    078  ER      E      # BCR 8,R           Branch on zero or zeros (reg)
inst NOP    470  ERXB    E      # BC  0,D1(X1,B1)   no operation
inst NOPR   070  ER      E      # BCR 0,R           no operation (reg)

# RELATIVE EXTENDED MNEMONICS
inst BRE    A784 ERIC    E      # BRANCH RELATIVE ON EQUAL             (BRC 8,IMMED)
inst BRH    A724 ERIC    E      # BRANCH RELATIVE ON HIGH              (BRC 2,IMMED)
inst BRL    A744 ERIC    E      # BRANCH RELATIVE ON LOW               (BRC 4,IMMED)
inst BRM    A744 ERIC    E      # BRANCH RELATIVE ON MINUS             (BRC 4,IIMED)
inst BRNE   A774 ERIC    E      # BRANCH RELATIVE ON NOT EQUAL         (BRC 7,IMMED)
inst BRNH   A7D4 ERIC    E      # BRANCH RELATIVE ON NOT HIGH          (BRC 13,IMMED)
inst BRNL   A7B4 ERIC    E      # BRANCH RELATIVE ON NOT HIGH          (BRC 11,IMMED)
inst BRNM   A7B4 ERIC    E      # BRANCH RELATIVE ON NOT MINUS         (BRC 11,IMMED)
inst BRNO   A7E4 ERIC    E      # BRANCH RELATIVE ON NOT ONES/OVERFLOW (BRC 14,IMMED)
inst BRNP   A7D4 ERIC    E      # BRANCH RELATIVE ON NOT PLUS          (BRC 13,IMMED)
inst BRNZ   A774 ERIC    E      # BRANCH RELATIVE ON NOT ZERO(S)       (BRC 7,IMMED)
inst BRO    A714 ERIC    E      # BRANCH RELATIVE ON ONES/OVERFLOW     (BRC 1,IMMED)
inst BRP    A724 ERIC    E      # BRANCH RELATIVE ON PLUS              (BRC 2,IIMED)
inst BRU    A7F4 ERIC    E      # UNCONDITIONAL BRANCH RELATIVE        (BRC 15,IMMED)
inst BRZ    A784 ERIC    E      # BRANCH RELATIVE ON ZERO              (BRC 8,IMMED)
inst J      A7F4 ERIC    E      # UNCONDITIONAL "JUMP" RELATIVE        (BRC 15,IMMED)
inst JAS    A75  RIB     E      # "JUMP" RELATIVE AND SAVE           (BRAS R1,IMMED)
inst JC     A74  RIC     E      # "JUMP" RELATIVE ON CONDITION         (BRC M,IMMED)
inst JCT    A76  RIB     E      # "JUMP" RELATIVE ON COUNT           (BRCT R1,IMMED)
inst JCTG   A77  RIB     E      # "JUMP" RELATIVE ON COUNT          (BRCTG R1,IMMED)
# inst JCTH   CC6  RILB    E      # "JUMP" RELATIVE ON COUNT HIGH     (BRCTH R1,IMMED)
inst JE     A784 ERIC    E      # "JUMP" RELATIVE ON EQUAL             (BRC 8,IMMED)
inst JH     A724 ERIC    E      # "JUMP" RELATIVE ON HIGH              (BRC 2,IMMED)
inst JL     A744 ERIC    E      # "JUMP" RELATIVE ON LOW               (BRC 4,IMMED)
inst JM     A744 ERIC    E      # "JUMP" RELATIVE ON MINUS             (BRC 4,IIMED)
inst JNE    A774 ERIC    E      # "JUMP" RELATIVE ON NOT EQUAL         (BRC 7,IMMED)
inst JNH    A7D4 ERIC    E      # "JUMP" RELATIVE ON NOT HIGH          (BRC 13,IMMED)
inst JNL    A7B4 ERIC    E      # "JUMP" RELATIVE ON NOT HIGH          (BRC 11,IMMED)
inst JNM    A7B4 ERIC    E      # "JUMP" RELATIVE ON NOT MINUS         (BRC 11,IMMED)
inst JNO    A7E4 ERIC    E      # "JUMP" RELATIVE ON NOT ONES/OVERFLOW (BRC 14,IMMED)
inst JNOP   A704 ERIC    E      # NO OPERATION                         (BRC 0,IMMED)
inst JNP    A7D4 ERIC    E      # "JUMP" RELATIVE ON NOT PLUS          (BRC 13,IMMED)
inst JNZ    A774 ERIC    E      # "JUMP" RELATIVE ON NOT ZERO(S)       (BRC 7,IMMED)
inst JO     A714 ERIC    E      # "JUMP" RELATIVE ON ONES/OVERFLOW     (BRC 1,IMMED)
inst JP     A724 ERIC    E      # "JUMP" RELATIVE ON PLUS              (BRC 2,IIMED)
inst JXH    84   RSI     E      # "JUMP" RELATIVE ON INDEX HIGH     (BRXH R,R,IMMED)
inst JXLE   85   RSI     E      # BRANCH RELATIVE ON INDEX LOW OR EQUAL (BRXLE R,R,IM)
inst JZ     A784 ERIC    E      # "JUMP" RELATIVE ON ZERO              (BRC 8,IMMED)

# RELATIVE LONG EXTENDED MNEMONICS
inst BREL   C084 ERILC   E      # BRANCH RELATIVE ON EQUAL             (BRCL 8,IMMED)
inst BRHL   C024 ERILC   E      # BRANCH RELATIVE ON HIGH              (BRCL 2,IMMED)
inst BRLL   C044 ERILC   E      # BRANCH RELATIVE ON LOW               (BRCL 4,IMMED)
inst BRML   C044 ERILC   E      # BRANCH RELATIVE ON MINUS             (BRCL 4,IIMED)
inst BRNEL  C074 ERILC   E      # BRANCH RELATIVE ON NOT EQUAL         (BRCL 7,IMMED)
inst BRNHL  C0D4 ERILC   E      # BRANCH RELATIVE ON NOT HIGH          (BRCL 13,IMMED)
inst BRNLL  C084 ERILC   E      # BRANCH RELATIVE ON NOT HIGH          (BRCL 11,IMMED)
inst BRNML  C084 ERILC   E      # BRANCH RELATIVE ON NOT MINUS         (BRCL 11,IMMED)
inst BRNOL  C0E4 ERILC   E      # BRANCH RELATIVE ON NOT ONES/OVERFLOW (BRCL 14,IMMED)
inst BRNPL  C0D4 ERILC   E      # BRANCH RELATIVE ON NOT PLUS          (BRCL 13,IMMED)
inst BRNZL  C074 ERILC   E      # BRANCH RELATIVE ON NOT ZERO(S)       (BRCL 7,IMMED)
inst BROL   C014 ERILC   E      # BRANCH RELATIVE ON ONES/OVERFLOW     (BRCL 1,IMMED)
inst BRPL   C024 ERILC   E      # BRANCH RELATIVE ON PLUS              (BRCL 2,IIMED)
inst BRUL   C0F4 ERILC   E      # UNCONDITIONAL BRANCH RELATIVE        (BRCL 15,IMMED)
inst BRZL   C084 ERILC   E      # BRANCH RELATIVE ON ZERO              (BRCL 8,IMMED)
inst JASL   C05  RILB    E      # "JUMP" RELATIVE AND SAVE LONG       (BRASL R,IMMED)
inst JLC    C04  RILC    E      # "JUMP" RELATIVE ON CONDITION LONG    (BRCL M,IMMED)
inst JLE    C084 ERILC   E      # "JUMP" RELATIVE ON EQUAL             (BRCL 8,IMMED)
inst JLH    C024 ERILC   E      # "JUMP" RELATIVE ON HIGH              (BRCL 2,IMMED)
inst JLL    C044 ERILC   E      # "JUMP" RELATIVE ON LOW               (BRCL 4,IMMED)
inst JLM    C044 ERILC   E      # "JUMP" RELATIVE ON MINUS             (BRCL 4,IIMED)
inst JLNE   C074 ERILC   E      # "JUMP" RELATIVE ON NOT EQUAL         (BRCL 7,IMMED)
inst JLNH   C0D4 ERILC   E      # "JUMP" RELATIVE ON NOT HIGH          (BRCL 13,IMMED)
inst JLNL   C084 ERILC   E      # "JUMP" RELATIVE ON NOT HIGH          (BRCL 11,IMMED)
inst JLNM   C084 ERILC   E      # "JUMP" RELATIVE ON NOT MINUS         (BRCL 11,IMMED)
inst JLNO   C0E4 ERILC   E      # "JUMP" RELATIVE ON NOT ONES/OVERFLOW (BRCL 14,IMMED)
inst JLNOP  C004 ERILC   E      # NO OPERATION                         (BRCL 0,IMMED)
inst JLNP   C0D4 ERILC   E      # "JUMP" RELATIVE ON NOT PLUS          (BRCL 13,IMMED)
inst JLNZ   C074 ERILC   E      # "JUMP" RELATIVE ON NOT ZERO(S)       (BRCL 7,IMMED)
inst JLO    C014 ERILC   E      # "JUMP" RELATIVE ON ONES/OVERFLOW     (BRCL 1,IMMED)
inst JLP    C024 ERILC   E      # "JUMP" RELATIVE ON PLUS              (BRCL 2,IIMED)
inst JLU    C0F4 ERILC   E      # UNCONDITIONAL "JUMP" RELATIVE        (BRCL 15,IMMED)
inst JLZ    C084 ERILC   E      # "JUMP" RELATIVE ON ZERO              (BRCL 8,IMMED)
inst JXHG   EC44 RIEE    E      # "JUMP" RELATIVE ON INDEX HIGH        (BRXHG)
inst JXLEG  EC45 RIEE    E      # "JUMP" RELATIVE ON INDEX LOW OR HIGH (BXLEG)

iset s390-base
    mnemonics A AD ADB ADBR ADR AE AEB AEBR AER AH AHI AL ALR AP AR AU AUR
    mnemonics AW AWR AXBR AXR
    mnemonics BAKR BAL BALR BAS BASR BASSM BC BCR BCT BCTR BRAS BRC BRCT BRXH BRXLE
    mnemonics BSA BSG BSM BXH BXLE
    mnemonics C CD CDB CDBR CDFBR CDFR CDR CDS CE CEB CEBR CEFBR CEFR CER
    mnemonics CFDBR CFDR CFEBR CFER CFXBR CFXR CH CHI CFC CKSM
    mnemonics CL CLC CLCL CLCLE CLI CLM CLR CLST CMPSC
    mnemonics CP CPYA CR CS CSP CUSE CUTFU CUUTF CVB CVD CXBR CXFBR CXFR CXR
    mnemonics D DD DDB DDBR DDR DE DEB DEBR DER DIAG DIDBR DIEBR DP DR DXBR DXR
    mnemonics EAR ED EDMK EFPC EPAR EREG ESAR ESTA EX
    mnemonics FIDBR FIDR FIEBR FIER FIXBR FIXR
    mnemonics HDR HER
    mnemonics IAC IC ICM IPK IPM IPTE ISKE IVSK
    mnemonics KDB KDBR KEB KEBR KXBR
    mnemonics L LA LAE LAM LASP LCDBR LCDR LCEBR LCER LCR LCTL LCXBR LCXR
    mnemonics LD LDE LDEB LDEBR LDER LDR LDXBR LDXR LE LEDBR LEDR LER LEXBR LEXR LFPC
    mnemonics LH LHI LM LNDBR LNDR LNEBR LNER LNR LNXBR LNXR
    mnemonics LPDBR LPDR LPEBR LPER LPR LPSW LPXBR LPXR LR LRA LRDR LRER
    mnemonics LTDBR LTDR LTEBR LTER LTR LTXBR LTXR LURA
    mnemonics LXD LXDB LXDBR LXDR LXE LXEB LXEBR LXER LXR LZDR LZER LZXR
    mnemonics M MADB MADBR MAEB MAEBR MC MD MDB MDBR MDE MDEB MDEBR MDER MDR ME
    mnemonics MEE MEEB MEEBR MEER MER MH MHI MP MR MS MSDB MSDBR MSEB MSEBR MSR MSTA
    mnemonics MVC MVCDK MVCIN MVCK MVCL MVCLE MVCP MVCS MVCSK MVPG MVI
    mnemonics MVN MVO MVST MVZ MXBR MXD MXDB MXDBR MXDR MXR
    mnemonics N NC NI NR
    mnemonics O OC OI OR
    mnemonics PACK PALB PC PGIN PGOUT PLO PR PT PTLB
    mnemonics RP RRBE
    mnemonics S SAC SACF SAR SCK SCKC SCKPF SD SDB SDBR SDR SE SEB SEBR SER SERVC
    mnemonics SFPC SH SIE SIGP
    mnemonics SL SLA SLDA SLDL SLL SLR SP SPKA SPM SPT SPX SQXBR SQD SQDB SQDBR SQDR
    mnemonics SQE SQEB SQEBR SQER SQXR SR SRA SRDA SRDL SRL SRNM SRP SRST SSAR SSKE
    mnemonics SSM ST STAM STAP STC STCK STCKC STCKE STCM STCTL STD STE STFPC STH STIDP
    mnemonics STM STSI STNSM STOSM STPT STPX STURA SU SUR SVC SW SWR SXBR SXR
    mnemonics TAR TB TBDR TBEDR TCDB TCEB TCXB THDER THDR TM TMH TML TMLH TMLL TPROT
    mnemonics TR TRAP2 TRAP4 TRE TRACE TRT TS
    mnemonics UNPK UPT
    mnemonics X XC XI XR
    mnemonics ZAP

iset s390-extended
    mnemonics B BE BER BH BHR BL BLR BM BMR BNE BNER BNH BNHR BNL BNLR BNM BNMR
    mnemonics BNO BNOR BNP BNPR BNZ BNZR BO BOR BP BPR BR BZ BZR NOP NOPR

iset s390-rel-extended
    mnemonics BRE BRH BRL BRM BRNE BRNH BRNL BRNM BRNO BRNP BRNZ BRO BRP BRU BRZ
    mnemonics J JAS JC JCT JCTG JE JH JL JM JNE JNH JNL JNM JNO JNOP JNP JNZ JO JP
    mnemonics JXH JXLE JZ JXHG JXLEG
#   Moved to zem-insn.msl JCTH

iset s390-io
     mnemonics CHSC CSCH HSCH MSCH RCHP RSCH SAL SCHM SSCH STCPS STCRW STSCH
     mnemonics TPI TSCH XSCH

# See IBM z/Architecture Principles of Operation, SA22-7832-00, December, 2000
# N3 instructions
iset s390-new
     mnemonics ALC ALCR BRASL BRCL DL DLR EPSW LARL LRV LRVH LRVR ML MLR RLL
     mnemonics SAM24 SAM31 SLB SLBR STFL STRV STRVH TAM

iset s390-new-extended
    mnemonics BREL BRHL BRLL BRML BRNEL BRNHL BRNLL BRNML BRNOL BRNPL BRNZL BROL
    mnemonics BRPL BRUL BRZL JASL JLC JLE JLH JLL JLM JLNE JLNH JLNL JLNM JLNO JLNOP
    mnemonics JLNP JLNZ JLO JLP JLU JLZ

# See IBM z/Architecture Principles of Operation, SA22-7832-00, December, 2000
# All N and N3 instructions
iset s390x-base
     mnemonics AG AGF AGFR AGHI AGR ALC ALCG ALCGR ALCR ALG ALGF ALGFR ALGR
     mnemonics BCTG BCTGR BRASL BRCL BRCTG BRXHG BRXLG BXHG BXLEG CDGBR CDGR CDSG
     mnemonics CEGBR CEGR CG CGDBR CGDR CGEBR CGER CGF CGFR CGHI CGR CGXBR CGXR CLG
     mnemonics CLGF CLGFR CLGR CLMH CSG CVBG CVDG CXGBR CXGR DL DLG DLGR DLR DSG DSGF
     mnemonics DSGFR DSGR EPSW EREGG ESEA ICMH IIHH IIHL IILH IILL LARL LCGFR
     mnemonics LCGR LCTLG LG LGF LGFR LGH LGHI LGR LLGC LLGF LLGFR LLGH LLGT
     mnemonics LLGTR LLIHH LLIHL LLILH LLILL LMD LMG LMH LNGFR LNGR LPGFR LPGR
     mnemonics LPQ LPSWE LRAG LRV LRVG LRVGR LRVH LRVR LTGFR LTGR LURAG MGHI ML MLG
     mnemonics MLGR MLR MSG MSGF MSGFR MSGR NG NGR NIHH NIHL NILH NILL OG OGR
     mnemonics OIHH OIHL OILH OILL RLL RLLG SAM24 SAM31 SAM64 SG SGF SGFR SGR
     mnemonics SLAG SLB SLBG SLBGR SLBR SLG SLGF SLGFR SLGR SLLG SRAG SRLG
     mnemonics STCMH STCTG STFL STG STMG STMH STPQ STRAG STRV STRVG STRVH STURG TAM
     mnemonics TMHH TMHL TRACG XG XGR


# ASN-AND-LX REUSE FACILITY (May, 2004)
inst EPAIR  B99A RRE            # EXTRACT PRIMARY ASN AND INSTANCE
inst ESAIR  B99B RRE            # EXTRACT SECONARY ASN AND INSTANCE
inst PTI    B99E RRE            # PROGRAM TRANSFER WITH INSTANCE
inst SSAIR  B99F RRE            # SET SECONDARY ASN WITH INSTANCE

# See IBM z/Architecture Principles of Operation, SA22-7832-03, May, 2004
# RA instructions
iset s390x-reuse-asn
    mnemonics EPAIR ESAIR PTI SSAIR


# BEAR-ENHANCEMENT FACILITY (May, 2022)
inst LBEAR  B200 S0      P      # LOAD BEAR
inst LPSWEY EB71 SIY0    P      # LOAD PSW EXTENDED
inst STBEAR B201 S0      P      # STORE BEAR

# See IBM z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# BE instructions
iset s390x-bear
    mnemonics LBEAR LPSWEY STBEAR


# COMPARE-AND-SWAP-AND-STORE FACILITY (April, 2007)
inst CSST   C82 SSF2            # COMPARE SWAP AND SAVE

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# CS instructions
iset s390x-compare-swap-save
    mnemonics CSST


# CONFIGURATION-TOPOLOGY FACILITY (February, 2008)
inst PTF    B9A2 RRE1    P      # PERFORM TOPOLOGY FUNCTION

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# CT instruction
iset s390x-cfg-topology
    mnemonics PTF


# CONSTRAINED TRANSACTIONAL-EXECUTION FACILITY
inst TBEGINC E561 SIL           # TRANSACTION BEGIN

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# CX instruction
iset s390x-cons-trans-exe
    mnemonics TBEGINC


# CPU MEASUREMENT COUNTER FACILITY (August, 2010)
inst ECPGA  B2ED RRE     P      # EXTRACT COPROCESSOR-GROUP ADDRESS
inst ECCTR  B2E4 RRE            # EXTRACT CPU COUNTER
inst EPCTR  B2E5 RRE     P      # EXTRACT PERIPHERAL COUNTER
inst LCCTL  B284 RRE     P      # LOAD CPU-COUNTER-SET CONTROLS
inst LPCTL  B285 S0      P      # LOAD PERIPHERAL-COUNTER-SET CONTROLS
inst QCTRI  B28E S0      P      # QUERY COUNTER INFORMATION
inst SCCTR  B2E0 RRE     P      # SET CPU COUNTER
inst SPCTR  B2E1 RRE     P      # SET PERIPHERAL COUNTER

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# See Load-Program-Parameter and the CPU Measurement Facilities, SA23-2260-01,
# September, 2010
iset s390x-cpu-counter
    mnemonics ECPGA ECCTR EPCTR LCCTL LPCTL QCTRI SCCTR SPCTR


# CPU MEASUREMENT SAMPLING FACILITY (August, 2010)
inst LSCTL  B287 S0      P      # LOAD SAMPLING CONTROLS
inst QSI    B386 S0      P      # QUERY SAMPLING INFORMATION

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# See Load-Program-Parameter and the CPU Measurement Facilities, SA23-2260-01,
# September, 2010
iset s390x-cpu-sampling
    mnemonics LSCTL QSI


# DAT ENHANCEMENT FACILITY 1 (June, 2003)
inst CSPG   B98A RRE     P      # COMPARE AND SWAP AND PURGE
inst IDTE   B98E RRFA2   P      # INVALIDATE DAT TABLE ENTRY

# See IBM z/Architecture Principles of Operation, SA22-7832-02, June, 2003
# DE instructions
iset s390x-dat-1
    mnemonics CSPG IDTE


# DAT ENHANCEMENT FACILITY 2 (September, 2005)
inst LPTEA  B9AA RRFB2   P     # LOAD PAGE-TAGLE-ENTRY ADDRESS

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# D2 instructions
iset s390x-dat-2
    mnemonics LPTEA


# DECIMAL FLOATING POINT FACILITY (April, 2007)
inst ADTR   B3D2 RRFA1          # ADD (LD)
inst AXTR   B3DA RRFA1          # ADD (ED)
inst CDGTR  B3F1 RRE            # CONVERT FROM FIXED (LD<64)
inst CDSTR  B3F3 RRE            # CONVERT FROM SIGNED PACKED (LD<64)
inst CDTR   B3E4 RRE            # COMPARE (LD)
inst CDUTR  B3F2 RRE            # CONVERT FROM UNSIGNED PACKED (LD<64)
inst CEDTR  B3F4 RRE            # COMPARE BIASED EXPONENT (LD)
inst CEXTR  B3FC RRE            # COMPARE BIASED EXPONENT (ED)
inst CGDTR  B3E1 RRFG           # CONVERT TO FIXED (64<LD)
inst CGXTR  B3E9 RRFG           # CONVERT TO FIXED (64<ED)
inst CSDTR  B3E3 RRFD           # CONVERT TO SIGNED PACKED (64<LD)
inst CSXTR  B3EB RRFD           # CONVERT TO SIGNED PACKED (64<ED)
inst CUDTR  B3E2 RRE            # CONVERT TO UNSIGNED PACKED (64<LD)
inst CUXTR  B3EA RRE            # CONVERT TO UNSIGNED PACKED (64<ED)
inst CXGTR  B3F9 RRE            # CONVERT FROM FIXED (ED<64)
inst CXSTR  B3FB RRE            # CONVERT FROM SIGNED PACKED (ED<128)
inst CXTR   B3EC RRE            # COMPARE (ED)
inst CXUTR  B3FA RRE            # CONVERT FROM UNSIGNED PACKED (ED<128)
inst DDTR   B3D1 RRFA1          # DIVIDE (LD)
inst DXTR   B3D9 RRFA1          # DIVIDE (ED)
inst EEDTR  B3E5 RRE            # EXTRACT BIASED EXPONENT (64<LD)
inst EEXTR  B3ED RRE            # EXTRACT BIASED EXPONENT (64<ED)
inst ESDTR  B3E7 RRE            # EXTRACT SIGNIFICANCE (LD)
inst ESXTR  B3EF RRE            # EXTRACT SIGNIFICANCE (ED)
inst FIDTR  B3D7 RRFE           # LOAD FP INTEGER (LD)
inst FIXTR  B3DF RRFE           # LOAD FP INTEGER (ED)
inst IEDTR  B3F6 RRFI           # INSERT BIASED EXPONENT (LD)
inst IEXTR  B3FE RRFI           # INSERT BIASED EXPONENT (ED)
inst KDTR   B3E0 RRE            # COMPARE AND SIGNAL (LD)
inst KXTR   B3E8 RRE            # COMPARE AND SIGNAL (ED)
inst LDETR  B3D4 RRFD           # LOAD LENGTHENED (LD<SD)
inst LDXTR  B3DD RRFE           # LOAD ROUNDED (LD<ED)
inst LEDTR  B3D5 RRFE           # LOAD ROUNDED (SD<LD)
inst LTDTR  B3D6 RRE            # LOAD AND TEST (LD)
inst LTXTR  B3DE RRE            # LOAD AND TEST (ED)
inst LXDTR  B3DC RRFD           # LOAD LENGTHENED (ED<LD)
inst MDTR   B3D0 RRFA1          # MULTIPLY (LD)
inst MXTR   B3D8 RRFA1          # MULTIPLY (ED)
inst QADTR  B3F5 RRFB2          # QUANTIZE (LD)
inst QAXTR  B3FD RRFB2          # QUANTIZE (ED)
inst RRDTR  B3F7 RRFB2          # REROUND (LD)
inst RRXTR  B3FF RRFB2          # REROUND (ED)
inst SDTR   B3D3 RRFA1          # SUBTRACT (LD)
inst SLDT   ED40 RXF            # SHIFT SIGNIFICAND LEFT (LD)
inst SLXT   ED48 RXF            # SHIFT SIGNIFICAND LEFT (ED)
inst SRDT   ED41 RXF            # SHIFT SIGNIFICAND RIGHT (LD)
inst SRXT   ED49 RXF            # SHIFT SIGNIFICAND RIGHT (ED)
inst SXTR   B3DB RRFA1          # SUBTRACT (ED)
inst TDCDT  ED54 RXE            # TEST DATA CLASS (LD)
inst TDCET  ED50 RXE            # TEST DATA CLASS (SD)
inst TDCXT  ED58 RXE            # TEST DATA CLASS (ED)
inst TDGDT  ED55 RXE            # TEST DATA GROUP (LD)
inst TDGET  ED51 RXE            # TEST DATA GROUP (SD)
inst TDGXT  ED59 RXE            # TEST DATA GROUP (ED)

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# TF instructions
iset s390x-dfp
    mnemonics ADTR AXTR CDGTR CDSTR CDTR CDUTR CEDTR CEXTR CGDTR CGXTR CSDTR
    mnemonics CSXTR CUDTR CUXTR CXGTR CXSTR CXTR CXUTR DDTR DXTR EEDTR EEXTR
    mnemonics ESDTR ESXTR FIDTR FIXTR IEDTR IEXTR KDTR KXTR LDETR LDXTR LEDTR
    mnemonics LTDTR LTXTR LXDTR MDTR MXTR QADTR QAXTR RRDTR RRXTR SDTR SLDT
    mnemonics SLXT SRDT SRXT SXTR TDCDT TDCET TDCXT TDGDT TDGET TDGXT


# DECIMAL FLOATING POINT ROUNDING FACILITY
inst SRNMT  B2B9 S0             # SET DFP ROUNDING MODE

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# TR instructions
iset s390x-dfp-rounding
    mnemonics SRNMT


# DECIMAL FLOATING POINT PACKED CONVERSION FACILITY (March, 2015)
inst CDPT   EDAE RSLB           # CONVERT FROM PACKED (LD)
inst CXPT   EDAF RSLB           # CONVERT FROM PACKED (ED)
inst CPDT   EDAC RSLB           # CONVERT TO PACKED (LD)
inst CPXT   EDAD RSLB           # CONVERT TO PACKED (ED)

# See IBM z/Architecture Principles of Operation, SA22-7832-10, March, 2015
# ZF instructions
iset s390x-dfp-packed-conv
     mnemonics CDPT CXPT CPDT CPXT


# DECIMAL FLOATING POINT ZONED-CONVERSION FACILITY (September, 2012)
inst CDZT   EDAA RSLB           # CONVERT FROM ZONED (LD)
inst CXZT   EDAB RSLB           # CONVERT FROM ZONED (ED)
inst CZDT   EDA8 RSLB           # CONVERT TO ZONED (LD)
inst CZXT   EDA9 RSLB           # CONVERT TO ZONED (ED)

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# ZF instructions
iset s390x-dfp-zoned-conv
     mnemonics CDZT CXZT CZDT CZXT


# DISTINCT-OPERANDS FACILITY (August, 2010)
inst AGHIK  ECD9 RIED           # ADD IMMEDIATE (64<16)
inst AGRK   B9E8 RRFA1          # ADD (64)
inst AHIK   ECD8 RIED           # ADD (32<16)
inst ALGHSIK ECDB RIED          # ADD LOGICAL WITH SIGNED IMMEDIATE (64<16)
inst ALGRK  B9EA RRFA1          # ADD LOGICAL (64)
inst ALHSIK ECDA RIED           # ADD LOGICAL WITH SIGNED IMMEDIATE (32<16)
inst ALRK   B9FA RRFA1          # ADD LOGICAL (32)
inst ARK    B9F8 RRFA1          # ADD (32)
inst NGRK   B9E4 RRFA1          # AND (64)
inst NRK    B9F4 RRFA1          # AND (32)
inst OGRK   B9E6 RRFA1          # OR (64)
inst ORK    B9F6 RRFA1          # OR (32)
inst SGRK   B9E9 RRFA1          # SUBTRACT (64)
inst SLAK   EBDD RSYA           # SHIFT LEFT SINGLE (32)
inst SLGRK  B9EB RRFA1          # SUBTRACT LOGICAL (64)
inst SLLK   EBDF RSYA           # SHIFT LEFT SINGLE LOGICAL (32)
inst SLRK   B9FB RRFA1          # SUBTRACT LOGICAL (32)
inst SRAK   EBDC RSYA           # SHIFT RIGHT SINGLE (32)
inst SRK    B9F9 RRFA1          # SUBTRACT (32)
inst SRLK   EBDE RSYA           # SHIFT RIGHT SINGLE LOGICAL (32)
inst XGRK   B9E7 RRFA1          # EXCLUSIVE OR (64)
inst XRK    B9F7 RRFA1          # EXCLUSIVE OR (32)

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# DO instructions
iset s390x-distinct-operands
    mnemonics AGHIK AGRK AHIK ALGHSIK ALGRK ALHSIK ALRK ARK NGRK NRK OGRK ORK
    mnemonics SGRK SLAK SLGRK SLLK SLRK SRAK SRK SRLK XGRK XRK


# ENHANCED-DAT 1 FACILITY (February, 2008)
inst PFMF   B9AF RRE     P      # PERFORM FRAME MANAGEMENT FUNCTION

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# ED instruction
iset s390x-enh-dat-1
    mnemonics PFMF


# ENHANCED-DAT 2 FACILITY (September, 2012)
inst CRDTE  B98F RRFB2   P      # COMPARE AND REPLACE DAT TABLE ENTRY

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# ED2 instructions
iset s390x-enh-dat-2
    mnemonics CRDTE


# EXECUTE-EXTENSIONS FACILITY (February, 2008)
inst EXRL   C60  RILB           # EXECUTE RELATIVE LONG

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# XX instruction
iset s390x-exe-ext
    mnemonics EXRL


# EXECUTION HINT FACILITY
inst BPP    C7   SMI            # BRANCH PREDICTION PRELOAD
inst BPRP   C5   MII            # BRANCH PREDICTION RELATIVE PRELOAD
inst NIAI   B2FA IE             # NEXT INSTRUCTION ACCESS INTENT

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# EH instructions
iset s390x-exe-hint
    mnemonics BPP BPRP NIAI


# EXTENDED IMMEDIATE FACILITY (September, 2005)
inst AFI    C29  RILA           # ADD IMMEDIATE (32)
inst AGFI   C28  RILA           # ADD IMMEDIATE (64)
inst ALFI   C2B  RILD           # ADD LOGICAL IMMEDIATE (32)
inst ALGFI  C2A  RILD           # ADD LOGICAL IMMEDIATE (64<32)
inst CFI    C2D  RILA           # COMPARE IMMEDIATE (32)
inst CGFI   C2C  RILA           # COMPARE IMMEDIATE (64<32)
inst CLFI   C2F  RILD           # COMPARE LOGICAL IMMEDIATE (32)
inst CLGFI  C2E  RILD           # COMPARE LOGICAL IMMEDIATE (64<32)
inst FLOGR  B983 RRE            # FIND LEFTMOST ONE
inst IIHF   C08  RILD           # INSERT IMMEDIATE (HIGH)
inst IILF   C09  RILD           # INSERT IMMEDIATE (LOW)
inst LBR    B926 RRE            # LOAD BYTE (32)
inst LGBR   B906 RRE            # LOAD BYTE (64)
inst LGFI   C01  RILA           # LOAD IMMEDIATE (64<32)
inst LGHR   B907 RRE            # LOAD HALFWORD (64)
inst LHR    B927 RRE            # LOAD HALFWORD (32)
inst LLC    E394 RXYA           # LOAD LOGICAL CHARACTER (32)
inst LLCR   B994 RRE            # LOAD LOGICAL CHARACTER (32)
inst LLGCR  B984 RRE            # LOAD LOGICAL CHARACTER (64)
inst LLGHR  B985 RRE            # LOAD LOGICAL HALFWORD (64)
inst LLH    E395 RXYA           # LOAD LOGICAL HALFWORD (32)
inst LLHR   B995 RRE            # LOAD LOGICAL HALFWORD (32)
inst LLIHF  C0E  RILD           # LOAD LOGICAL IMMEDIATE (HIGH)
inst LLILF  C0F  RILD           # LOAD LOGICAL IMMEDIATE (LOW)
inst LT     E312 RXYA           # LOAD AND TEST (32)
inst LTG    E302 RXYA           # LOAD AND TEST (64)
inst NIHF   C0A  RILD           # AND IMMEDIATE (HIGH)
inst NILF   C0B  RILD           # AND IMMEDIATE (LOW)
inst OIHF   C0C  RILD           # OR IMMEDIATE (HIGH)
inst OILF   C0D  RILD           # OR IMMEDIATE (LOW)
inst SLFI   C25  RILD           # SUBTRACT LOGICAL IMMEDIATE (32)
inst SLGFI  C24  RILD           # SUBTRACT LOGICAL IMMEDIATE (64<32)
inst XIHF   C06  RILD           # EXCLUSIVE OR IMMEDIATE (HIGH)
inst XILF   C07  RILD           # EXCLUSIZE OR IMMEDIATE (LOW)

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# EI instructions
iset s390x-ext-immed
    mnemonics AFI AGFI ALFI ALGFI CFI CGFI CLFI CLGFI FLOGR IIHF IILF LBR LGBR
    mnemonics LGFI LGHR LHR LLC LLCR LLGCR LLGHR LLH LLHR LLIHF LLILF LT LTG
    mnemonics NIHF NILF OIHF OILF SLFI SLGFI XIHF XILF

# EXTENDED TRANSLATION FACILITY 2 (October, 2000)
inst CLCLU  EB8F RSA2           # COMPARE LOGICAL LONG UNICODE
inst MVCLU  EB8E RSA2           # MOVE LONG UNICODE
inst PKA    E9   SSF1           # PACK ASCII
inst PKU    E1   SSF1           # PACK UNICODE
inst TP     EBC0 RSLA           # TEST DECIMAL
inst TROO   B993 RRE            # TRANSLATE ONE TO ONE
inst TROT   B992 RRE            # TRANSLATE ONE TO TWO
inst TRTO   B991 RRE            # TRANSLATE TWO TO ONE
inst TRTT   B990 RRE            # TRANSLATE TWO TO TWO
inst UNPKA  EA   SSA            # UNPACK ASCII
inst UNPKU  E2   SSA            # UNPACK UNICODE

# See IBM z/Architecture Principles of Operation, SA22-7832-00, December, 2000
# E2 instructions
iset s390x-translate-2
    mnemonics CLCLU MVCLU PKA PKU TP TROO TROT TRTO TRTT UNPKA UNPKU

# EXTENDED TRANSLATION FACILITY 3 (May, 2004)
inst CU12   B2A7 RRE            # CONVERT UTF-8 TO UTF-16
inst CU14   B9B0 RRE            # CONVERT UFT-8 TO UTF-32
inst CU21   B2A6 RRE            # CONVERT UTF-16 TO UTF-8
inst CU24   B9B1 RRE            # CONVERT UTF-16 TO UTF-32
inst CU41   B9B2 RRE            # CONVERT UTF-32 TO UTF-8
inst CU42   B9B3 RRE            # CONVERT UTF-32 TO UTF-16
inst SRSTU  B9BE RRE            # SEARCH STRING UNICODE
inst TRTR   D0   SSA            # TRANSLATE AND TEST REVERSED

# See IBM z/Architecture Principles of Operation, SA22-7832-03, May, 2004
# E3 instructions
iset s390x-translate-3
    mnemonics CU12 CU14 CU21 CU24 CU41 CU42 SRSTU TRTR


# EXTRACT-CPU-TIME FACILITY (April, 2007)
inst ECTG   C81  SSF2           # EXTRACT CPU TIME

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# ET instruction
iset s390x-extract-cpu-time
    mnemonics ECTG


# FLOATING-POINT EXTENSION FACILITY (August, 2010)
inst ADTRA  B3D2 RRFA2          # ADD (LD)
inst AXTRA  B3DA RRFA2          # ADD (ED)
inst CDFBRA B395 RRFE           # CONVERT FROM FIXED (LB<32)
inst CDFTR  B951 RRFE           # CONVERT FROM FIXED (LD<32)
inst CDGBRA B3A5 RRFE           # CONVERT FROM FIXED (LB<64)
inst CDGTRA B3F1 RRFE           # CONVERT FROM FIXED (LD<64)
inst CDLFBR B391 RRFE           # CONVERT FROM LOGICAL (LB<32)
inst CDLFTR B953 RRFE           # CONVERT FROM LOGICAL (LD<32)
inst CDLGBR B3A1 RRFE           # CONVERT FROM LOGICAL (LB<64)
inst CDLGTR B952 RRFE           # CONVERT FROM LOGICAL (LD<64)
inst CEFBRA B394 RRFE           # CONVERT FROM FIXED (SB<32)
inst CEGBRA B3A4 RRFE           # CONVERT FROM FIXED (SB<64)
inst CELFBR B390 RRFE           # CONVERT FROM LOGICAL (SB<32)
inst CELGBR B3A0 RRFE           # CONVERT FROM LOGICAL (SB<64)
inst CFDBRA B399 RRFE           # CONVERT TO FIXED (32<LB)
inst CFDTR  B941 RRFE           # CONVERT TO FIXED (32<LD)
inst CFEBRA B398 RRFE           # CONVERT TO FIXED (32<SB)
inst CFXBRA B39A RRFE           # CONVERT TO FIXED (32<EB)
inst CFXTR  B949 RRFE           # CONVERT TO FIXED (32<ED)
inst CGDBRA B3A9 RRFE           # CONVERT TO FIXED (64<LB)
inst CGDTRA B3E1 RRFE           # CONVERT TO FIXED (64<LD)
inst CGEBRA B3A8 RRFE           # CONVERT TO FIXED (64<SB)
inst CGXBRA B3AA RRFE           # CONVERT TO FIXED (64<EB)
inst CGXTRA B3E9 RRFE           # CONVERT TO FIXED (64<ED)
inst CLFDBR B39D RRFE           # CONVERT TO LOGICAL (32<LB)
inst CLFDTR B943 RRFE           # CONVERT TO LOGICAL (32<LD)
inst CLFEBR B39C RRFE           # CONVERT TO LOGICAL (32<SB)
inst CLFXBR B39E RRFE           # CONVERT TO LOGICAL (32<EB)
inst CLFXTR B94B RRFE           # CONVERT TO LOGICAL (32<ED)
inst CLGDBR B3AD RRFE           # CONVERT TO LOGICAL (64<LB)
inst CLGDTR B942 RRFE           # CONVERT TO LOGICAL (64<LD)
inst CLGEBR B3AC RRFE           # CONVERT TO LOGICAL (64<SB)
inst CLGXBR B3AE RRFE           # CONVERT TO LOGICAL (64<EB)
inst CLGXTR B94A RRFE           # CONVERT TO LOGICAL (64<ED)
inst CXFBRA B396 RRFE           # CONVERT FROM FIXED (EB<32)
inst CXFTR  B959 RRFE           # CONVERT FROM FIXED (ED<32)
inst CXGBRA B3A6 RRFE           # CONVERT FROM FIXED (EB<64)
inst CXGTRA B3F9 RRFE           # CONVERT FROM FIXED (ED<64)
inst CXLFBR B392 RRFE           # CONVERT FROM LOGICAL (EB<32)
inst CXLFTR B95B RRFE           # CONVERT FROM LOGICAL (ED<32)
inst CXLGBR B3A2 RRFE           # CONVERT FROM LOGICAL (EB<64)
inst CXLGTR B95A RRFE           # CONVERT FROM LOGICAL (ED<64)
inst DDTRA  B3D1 RRFA2          # DIVIDE (LD)
inst DXTRA  B3D9 RRFA2          # DIVIDE (ED)
inst FIDBRA B35F RRFE           # LOAD FP INTEGER (LB)
inst FIEBRA B357 RRFE           # LOAD FP INTEGER (SB)
inst FIXBRA B347 RRFE           # LOAD FP INTERER (EB)
inst LDXBRA B345 RRFE           # LOAD ROUNDED (LB<EB)
inst LEDBRA B344 RRFE           # LOAD ROUNDED (SB<LB)
inst LEXBRA B346 RRFE           # LOAD ROUNDED (DB<EB)
inst MDTRA  B3D0 RRFA2          # MULTIPLY (LD)
inst MXTRA  B3D8 RRFA2          # MULTIPLY (ED)
inst SDTRA  B3D3 RRFA2          # SUBTRACT (LD)
inst SRNMB  B2B8 S0             # SET BFP ROUNDING MODE
inst SXTRA  B3DB RRFA2          # SUBTRACT (ED)

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# F instructions
iset s390x-fp-ext
    mnemonics ADTRA AXTRA CDFBRA CDFTR CDGBRA CDGTRA CDLFBR CDLFTR CDLGBR
    mnemonics CDLGTR CEFBRA CEGBRA CELFBR CELGBR CFDBRA CFDTR CFEBRA CFXBRA
    mnemonics CFXTR CGDBRA CGDTRA CGEBRA CGXBRA CGXTRA CLFDBR CLFDTR CLFEBR
    mnemonics CLFXBR CLFXTR CLGDBR CLGDTR CLGEBR CLGXBR CLGXTR CXFBRA CXFTR
    mnemonics CXGBRA CXGTRA CXLFBR CXLFTR CXLGBR CXLGTR DDTRA DXTRA FIDBRA
    mnemonics FIEBRA FIXBRA LDXBRA LEDBRA LEXBRA MDTRA MXTRA SDTRA SRNMB SXTRA


# FLOATING-POINT-SUPPORT-SIGN-HANDLING FACILITY (April, 2007)
inst CPSDR  B372 RRFH           # COPY SIGN (LONG)
inst LCDFR  B373 RRE            # LOAD COMPLEMENT (LONG)
inst LNDFR  B371 RRE            # LOAD NEGATIVE (LONG)
inst LPDFR  B370 RRE            # LOAD POSITIVE (LONG)

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# FS instructions
iset s390x-fp-sign-handling
    mnemonics CPSDR LCDFR LNDFR LPDFR


# FPR-GR TRANSFER FACILITY
inst LDGR   B3C1 RRE            # LOAD FPR FROM GR (LONG<64)
inst LGDR   B3CD RRE            # LOAD GR FROM FPR (64<LONG)

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# FG instructions
iset s390x-fpr-gr-transfer
    mnemonics LDGR LGDR


# GENERAL-INSTRUCTIONS-EXTENSION FACILITY (February, 2008)
inst AGSI   EB7A SIY1           # ADD IMMEDIATE (64<8)
inst ALGSI  EB7E SIY1           # ADD LOGICAL WITH SIGNED IMMEDIATE (64<8)
inst ALSI   EB6E SIY1           # ADD LOGICAL WITH SIGNED IMMEDIATE (32<8)
inst ASI    EB6A SIY1           # ADD IMMEDIATE (32<8)
inst CGFRL  C6C  RILB           # COMPARE REALTIVE LONG (64<32)
inst CGH    E334 RXYA           # COMPARE HALFWORD (64<16)
inst CGHRL  C64  RILB           # COMPARE HALFWORD RELATIVE LONG (64<16)
inst CGHSI  E558 SIL1           # COMPARE HALFWORD IMMEDIATE (64<16)
inst CGIB   ECFC RIS            # COMPARE IMMEDIATE AND BRANCH (64<8)
inst CGIJ   EC7C RIEC           # COMPARE IMMEDIATE AND BRANCH RELATIVE (64<8)
inst CGIT   EC70 RIEA           # COMPARE IMMEDIATE AND TRAP (64<16)
inst CGRB   ECE4 RRS            # COMPARE AND BRANCH (64)
inst CGRJ   EC64 RIEB           # COMPARE AND BRANCH RELATIVE (64)
inst CGRL   C68  RILB           # COMPARE RELATIVE LONG (64)
inst CGRT   B960 RRFC           # COMPARE AND TRAP (64)
inst CHHSI  E554 SIL1           # COMPARE HALFWORD IMMEDIATE (16)
inst CHRL   C65  RILB           # COMPARE HALFWORD RELATIVE LONG (32<16)
inst CHSI   E55C SIL1           # COMPARE HALFWORD IMMEDIATE (32<16)
inst CIB    ECFE RIS            # COMPARE IMMEDIATE AND BRANCH (32<8)
inst CIJ    EC7E RIEC           # COMPARE IMMEIDATE AND BRANCH RELATIVE (32<8)
inst CIT    EC72 RIEA           # COMPARE IMMEDIATE AND TRAP (32<16)
inst CLFHSI E55D SIL            # COMPARE LOGICAL IMMEDIATE (32<16)
inst CLFIT  EC73 RIEA1          # COMPARE LOGICAL IMMEDIATE AND TRAP (32<16)
inst CLGFRL C6E  RILB           # COMPARE LOGICAL RELATIVE LONG (64<32)
inst CLGHRL C66  RILB           # COMPARE LOGICAL RELATIVE LONG (64<16)
inst CLGHSI E559 SIL            # COMPARE LOGICAL IMMEDIATE (64<16)
inst CLGIB  ECFD RIS1           # COMPARE LOGICAL IMMEDIATE AND BRANCH (64<8)
inst CLGIJ  EC7D RIEC1          # COMPARE LOGICAL IMMEDIATE AND BRANCH RELATIVE (64<8)
inst CLGIT  EC71 RIEA1          # COMPARE LOGICAL IMMEDIATE AND TRAP (64<16)
inst CLGRB  ECE5 RRS            # COMPARE LOGICAL AND BRANCH (64)
inst CLGRJ  EC65 RIEB           # COMPARE LOGICAL AND BRANCH RELATIVE (64)
inst CLGRL  C6A  RILB           # COMPARE LOGICAL RELATIVE LONG (64)
inst CLGRT  B961 RRFC           # COMPARE LOGICAL AND TRAP (64)
inst CLHHSI E555 SIL            # COMPARE LOGICAL IMMEDIATE (16)
inst CLHRL  C67  RILB           # COMPARE LOGICAL RELATIVE LONG (32<16)
inst CLIB   ECFF RIS1           # COMPARE LOGICAL IMMEDIATE AND BRANCH (32<8)
inst CLIJ   EC7F RIEC1          # COMPARE LOGICAL IMMEDIATE AND BRANCH RELATIVE (32<8)
inst CLRB   ECF7 RRS            # COMPARE LOGICAL AND BRANCH (32)
inst CLRJ   EC77 RIEB           # COMPARE LOGICAL AND BRANCH RELATIVE (32)
inst CLRL   C6F  RILB           # COMPARE LOGICAL RELATIVE LONG (32)
inst CLRT   B973 RRFC           # COMPARE LOGICAL AND TRAP (32)
inst CRB    ECF6 RRS            # COMPARE AND BRANCH (32)
inst CRJ    EC76 RIEB           # COMPARE AND BRANCH RELATIVE (32)
inst CRL    C6D  RILB           # COMPARE RELATIVE LONG (32)
inst CRT    B972 RRFC           # COMPARE AND TRAP (32)
inst ECAG   EB4C RSYA           # EXTRACT CACHE ATTRIBUTE
inst LAEY   E375 RXYA           # LOAD ADDRESS EXTENDED
inst LGFRL  C4C  RILB           # LOAD RELATIVE LONG (64<32)
inst LGHRL  C44  RILB           # LOAD HALFWORD RELATIVE LONG (64<16)
inst LGRL   C48  RILB           # LOAD RELATIVE LONG (64)
inst LHRL   C45  RILB           # LOAD HALFWORD RELATIVE LONG (32<16)
inst LLGFRL C4E  RILB           # LOAD LOGICAL RELATIVE LONG (64<32)
inst LLGHRL C46  RILB           # LOAD LOGICAL HALFWORD RELATIVE LONG (64<16)
inst LLHRL  C42  RILB           # LOAD LOGICAL HALFWORD RELATIVE LONG (32<16)
inst LRL    C4D  RILB           # LOAD RELATIVE LONG (32)
inst LTGF   E332 RXYA           # LOAD AND TEST (63<32)
inst MFY    E35C RXYA           # MULTIPLY (64<32)
inst MHY    E37C RXYA           # MULTIPLY HALFWORD (32)
inst MSFI   C21  RILA           # MULTIPLY SINGLE IMMEDIATE (32)
inst MSGFI  C20  RILA           # MULTIPLY SINGLE IMMEDIATE (64<32)
inst MVGHI  E548 SIL1           # MOVE (64<16)
inst MVHHI  E544 SIL1           # MOVE (16<16)
inst MVHI   E54C SIL1           # MOVE (32<16)
inst PFD    E336 RXYB           # PREFETCH DATA
inst PFDRL  C62  RILC           # PREFETCH DATA RELATIVE LONG
inst RISBG  EC55 RIEF           # ROTATE THEN INSERT SELECTED BITS
inst RNSBG  EC54 RIEF           # ROTATE THEN AND SELECTED BITS
inst ROSBG  EC56 RIEF           # ROTATE THEN OR SELECTED BITS
inst RXSBG  EC57 RIEF           # ROTATE THEN EXCLUSIVE OR SELECTED BITS
inst STGRL  C4B  RILB           # STORE RELATIVE LONG (64)
inst STHRL  C47  RILB           # STORE HALFWORD RELATIVE LONG
inst STRL   C4F  RILB           # STORE RELATIVE LONG (32)

# GENERAL-INSTRUCTION-EXTENSION FACILITY EXTENDED MNEMONICS
# MSL enhancements are required to support extended mnemonics of these instructions
# Not presently available.

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# XX instruction
iset s390x-gen-inst-ext
    mnemonics AGSI ALGSI ALSI ASI CGFRL CGH CGHRL CGHSI CGIB CGIJ CGIT CGRB CGRJ
    mnemonics CGRL CGRT CHHSI CHRL CHSI CIB CIJ CIT CLFHSI CLFIT CLGFRL CLGHRL
    mnemonics CLGHSI CLGIB CLGIJ CLGIT CLGRB CLGRJ CLGRL CLGRT CLHHSI CLHRL
    mnemonics CLIB CLIJ CLRB CLRJ CLRL CLRT CRB CRJ CRL CRT ECAG LAEY LGFRL
    mnemonics LGHRL LGRL LHRL LLGFRL LLGHRL LLHRL LRL LTGF MFY MHY MSFI MSGFI
    mnemonics MVGHI MVHHI MVHI PFD PFDRL RISBG RNSBG ROSBG RXSBG STGRL STHRL
    mnemonics STRL

# GUARDED STORAGE FACILITY (September, 2017)
inst LGG    E34C RXYA           # LOAD GUARDED
inst LGSC   E44D RXYA           # LOAD GUARDED STORAGE CONTROLS
inst LLGFSG E348 RXYA           # LOAD GUARDED AND SHIFT CONTROLS
inst STGSC  E349 RXYA           # STORE GUARDED STORAGE CONTROLS

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# GF instrucstions
iset s390x-guarded-storage
     mnemonics LGG LGSC LLGFSG STGSC


# HFP MULTIPLY ADD/SUBTRACT FACILITY (October, 2001)
inst MAD    ED3E RXF            # MULTIPLY AND ADD (LH)
inst MADR   B33E RRD            # MULTIPLY AND ADD (LH)
inst MAE    ED2E RXF            # MULTIPLY AND ADD (SH)
inst MAER   B32E RRD            # MULTIPLY AND ADD (SH)
inst MSD    ED3F RXF            # MULTIPLY AND SUBTRACT (LH)
inst MSDR   B33F RRD            # MULTIPLY AND SUBTRACT (LH)
inst MSE    ED2F RXF            # MULTIPLY AND SUBTRACT (SH)
inst MSER   B32F RRD            # MULTIPLY AND SUBTRACT (SH)

# See IBM z/Architecture Principles of Operation, SA22-7832-02, June, 2003
# HM instructions
iset s390x-HFP-multiply-add
    mnemonics MAD MADR MAE MAER MSD MSDR MSE MSER


# HFP UNNORMALIZED EXTENSIONS FACILITY (September, 2005)
inst MAY    ED3A RXF            # MULTIPLY AND ADD UNNORMALIZED (EH<LH)
inst MAYH   ED3C RXF            # MULTIPLY AND ADD UNNORMALIZED (EH HIGH<LH)
inst MAYHR  B33C RRFH           # MULTIPLY AND ADD UNNORMALIZED (EH HIGH<LH)
inst MAYL   ED38 RXF            # MULTIPLY AND ADD UNNORMALIZED (EH LOW<LH)
inst MAYLR  B338 RRFH           # MULTIPLY AND ADD UNNORMALIZED (EH LOW<LH)
inst MAYR   B33A RRFH           # MULTIPLY AND ADD UNNORMALIZED (EH<LH)
inst MY     ED3B RXF            # MULTIPLY UNNORMALIZED (EH<LH)
inst MYH    ED3D RXF            # MULTIPLY UNNORMALIZED (EH HIGH<LH)
inst MYHR   B33D RRFH           # MULTIPLY UNNORMALIZED (EH HIGH<LH)
inst MYL    ED39 RXF            # MULTIPLY UNNORMALIZED (EH LOW<LH)
inst MYLR   B339 RRFH           # MULTIPLY UNNORMALIZED (EH LOW<LH)
inst MYR    B33B RRFH           # MULTIPLY UNNORMALIZED (EH<LH)

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# UE instructions
iset s390x-hfp-unnorm-ext
    mnemonics MAY MAYH MAYHR MAYL MAYLR MAYR MY MYH MYHR MYL MYLR MYR


# HIGH-WORD FACILITY (August, 2010)
inst AHHHR  B9C8 RRFA1          # ADD HIGH (32)
inst AHHLR  B9D8 RRFA1          # ADD HIGH (32)
inst AIH    CC8  RILA           # ADD IMMEDIATE HIGH (32)
inst ALHHHR B9CA RRFA1          # ADD LOGICAL HIGH (32)
inst ALHHLR B9DA RRFA1          # ADD LOGICAL HIGH (32)
inst ALSIH  CCA  RILA           # ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32)
inst ALSIHN CCB  RILA           # ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32)
inst BRCTH  CC6  RILB           # BRANCH RELATIVE ON COUNT HIGH (32)
inst CHF    E3CD RXYA           # COMPARE HOGH (32)
inst CHHR   B9CD RRE            # COMPARE HIGH (32)
inst CHLR   B9DD RRE            # COMPARE HIGH (32)
inst CIH    CCD  RILA           # COMPARE IMMEDIATE HIGH (32)
inst CLHF   E3CF RXYA           # COMPARE LOGICAL HIGH (32)
inst CLHHR  B9CF RRE            # COMPARE LOGICAL HIGH (32)
inst CLHLR  B9DF RRE            # COMPARE LOGICAL HIGH (32)
inst CLIH   CCF  RILD           # COMPARE LOGICAL IMMEDIATE HIGH (32)
inst LBH    E3C0 RXYA           # LOAD BYTE HIGH (32<8)
inst LFH    E3CA RXYA           # LOAD HIGH (32)
inst LHH    E3C4 RXYA           # LOAD HALFWORD HIGH (32)
inst LLCH   E3C2 RXYA           # LOAD LOGICAL CHARACTER HIGH (32<8)
inst LLHH   E3C6 RXYA           # LOAD LOGICAL HALFWORD HIGH (32<16)
inst RISBHG EC5D RIEF           # ROTATE THEN INSERT SELECTED BITS HIGH
inst RISBLG EC51 RIEF           # ROTATE THEN INSERT SELECTED BITS LOW
inst SHHHR  B9C9 RRFA1          # SUBTRACT HIGH (32)
inst SHHLR  B9D9 RRFA1          # SUBTRACT HIGH (32)
inst SLHHHR B9CB RRFA1          # SUBTRACT LOGICAL HIGH (32)
inst SLHHLR B9DB RRFA1          # SUBTRACT LOGICAL HIGH (32)
inst STCH   E3C3 RXYA           # STORE CHARACTER HIGH (8)
inst STFH   E3CB RXYA           # STORE HIGH (32)
inst STHH   E3C7 RXYA           # STORE HALFWORD HIGH (16)

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# HW instructions
iset s390x-high-word
    mnemonics AHHHR AHHLR AIH ALHHHR ALHHLR ALSIH ALSIHN BRCTH CHF CHHR CHLR
    mnemonics CIH CLHF CLHHR CLHLR CLIH LBH LFH LHH LLCH LLHH RISBHG RISBLG SHHHR
    mnemonics SHHLR SLHHHR SLHHLR STCH STFH STHH


# IEEE-EXCEPTION-SIMULATION FACILITY
inst LFAS   B2BD S0             # LOAD FPC AND SIGNAL
inst SFASR  B385 RRE1           # SET FPC AND SIGNAL

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# XF instructions
iset s390x-IEEE-exception-sim
    mnemonics LFAS SFASR


# INSERT REFERENCE BITS MULTIPLE FACILITY
inst IRBM   B9AC RRE     P      # INSERT REFERENCE BITS MULTIPLE

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September 2017
# IM instruction
iset s390x-insert-ref-bits-multiple
    mnemonics IRBM


# INTERLOCKED ACCESS FACILITY (August, 2010)
inst LAA    EBF8 RSYA           # LOAD AND ADD (32)
inst LAAG   EBE8 RSYA           # LOAD AND ADD (64)
inst LAAL   EBFA RSYA           # LOAD AND ADD LOGICAL (32)
inst LAALG  EBEA RSYA           # LOAD AND ADD LOGICAL (64)
inst LAN    EBF4 RSYA           # LOAD AND AND (32)
inst LANG   EBE4 RSYA           # LOAD AND AND (64)
inst LAO    EBF6 RSYA           # LOAD AND OR (32)
inst LAOG   EBE6 RSYA           # LOAD AND OR (64)
inst LAX    EBF7 RSYA           # LOAD AND EXCLUSIVE OR (32)
inst LAXG   EBE7 RSYA           # LOAD AND EXCLUSIVE OR (64)
inst LPD    C84  SSF3           # LOAD PAIR DISJOINT (32)
inst LPDG   C85  SSF3           # LOAD PAIR DISJOINT (64)

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# IA instructions
iset s390-interlocked-access
    mnemonics LAA LAAG LAAL LAALG LAN LANG LAO LAOG LAX LAXG LPD LPDG


# LOAD-AND-TRAP FACILITY
inst LAT    E39F RXYA           # LOAD AND TRAP (32L<32)
inst LFHAT  E3C8 RXYA           # LOAD HIGH AND TRAP (32H<32)
inst LGAT   E385 RXYA           # LOAD AND TRAP (64)
inst LLGFAT E39D RXYA           # LOAD LOGICAL AND TRAP (64<32)
inst LLGTAT E39C RXYA           # LOAD LOGICAL THIRY ONE BITS AND TRAP (64<31)

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# LT instructions
iset s390x-load-and-trap
    mnemonics LAT LFHAT LGAT LLGFAT LLGTAT


# LOAD-AND-ZERO-RIGHTMOST BYTE FACILITY
inst LZRF   E33B RXYA           # LOAD AND ZERO RIGHTMOST BYTE (32)
inst LZRG   E32A RXYA           # LOAD AND ZERO RIGHTMOST BYTE (64)
inst LLZRGF E33A RXYA           # LOAD LOGICAL AND ZERO RIGHTMOST BYTE (32>64)

# See IBM z/Architecture Principles of Operation, SA22-7832-10, March, 2015
# LZ instructions
iset s390x-load-zero-right
    mnemonics LZRF LZRG LLZRGF


# LOAD/STORE-ON-CONDITION FACILITY (August, 2010)
inst LOC    EBF2 RSYB1          # LOAD ON CONDITION (32)
inst LOCG   EBE2 RSYB1          # LOAD ON CONDITION (64)
inst LOCGR  B9E2 RRFC           # LOAD ON CONDITION (64)
inst LOCR   B9F2 RRFC           # LOAD ON CONDITION (32)
inst STOC   EBF3 RSYB1          # STORE ON CONDITION (32)
inst STOCG  EBE3 RSYB1          # STORE ON CONDITION (64)

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# CL instructions
iset s390x-load-store-cond
    mnemonics LOC LOCG LOCGR LOCR STOC STOCG


# LOAD/STORE-ON-CONDITION FACILITY 2 (March, 2015)
inst LOCFH  EBE0 RSYB1          # LOAD HIGH ON CONDITION (32)
inst LOCFHR B9E0 RRFC           # LOAD HIGH ON CONDITION (32)
inst LOCGHI EC46 RIEG           # LOAD HALFWORD IMMEDICATE ON CONDITION (64)
inst LOCHHI EC4E RIEG           # LOAD HALFWORD HIGH IMMEDIATE ON CONDITION
inst LOCHI  EC42 RIEG           # LOAD HALFWORD IMMEDIATE ON CONDITION (32)
inst STOCFH EBE1 RSYB1          # STORE HIGH ON CONDITION

# See IBM z/Architecture Principles of Operation, SA22-7832-10, March, 2015
# L2 instructions
iset s390x-load-store-cond-2
    mnemonics LOCFH LOCFHR LOCGHI LOCHHI LOCHI STOCFH


# LONG DISTANCE FACILITY (June, 2003)
inst AHY    E37A RXYA           # ADD HALFWORD
inst ALY    E35E RXYA           # ADD LOGICAL (32)
inst AY     E35A RXYA           # ADD (32)
inst CDSY   EB31 RSYA           # COMPARE DOUBLE AND SWAP (32)
inst CHY    E379 RXYA           # COMPARE HALFWORD
inst CLIY   EB55 SIY            # COMPARE LOGICAL (IMMEDEIATE)
inst CLMY   EB21 RSYB           # COMPARE LOGICAL CHARACTERS UNDER MASK (LOW)
inst CLY    E355 RXYA           # COMPARE LOGICAL (32)
inst CSY    EB14 RSYA           # COMPARE AND SWAP (32)
inst CVBY   E306 RXYA           # CONVERT TO BINARY (32)
inst CVDY   E326 RXYA           # CONVERT TO DECIMAL (32)
inst CY     E359 RXYA           # COMPARE (32)
inst ICMY   EB81 RSYB           # INSERT CHARACTERS UNDER MASK (LOW)
inst ICY    E373 RXYA           # INSERT CHARACTER
inst LAMY   EB9A RSLB           # LOAD ACCESS MULTIPLE
inst LAY    E371 RXYA           # LOAD ADDRESS
inst LB     E376 RXYA           # LOAD BYTE (32)
inst LDY    ED65 RXYA           # LOAD (L)
inst LEY    ED64 RXYA           # LOAD (S)
inst LGB    E377 RXYA           # LOAD BYTE (64)
inst LHY    E378 RXYA           # LOAD HALFWORD (32)
inst LMY    EB98 RSYA           # LOAD MULTIPLE (32)
inst LRAY   E313 RXYA    P      # LOAD REAL ADDRESS (32)
inst LY     E358 RXYA           # LOAD (32)
inst MSY    E351 RXYA           # MULTIPLY SINGLE (32)
inst MVIY   EB52 SIY            # MOVE (IMMEDIATE)
inst NIY    EB54 SIY            # AND (IMMEDIATE)
inst NY     E354 RXYA           # AND (32)
inst OIY    EB56 SIY            # OR (IMMEDIATE)
inst OY     E356 RXYA           # OR (32)
inst SHY    E37B RXYA           # SUBTRACT HALFWORD
inst SLY    E35F RXYA           # SUBTRACT LOGICAL (32)
inst STAMY  EB9B RSLB           # STORE ACCESS MULTIPLE
inst STCMY  EB2D RSYB           # STORE CHARACTERS UNDER MASK (LOW)
inst STCY   E372 RXYA           # STORE CHARACTER
inst STDY   ED67 RXYA           # STORE (L)
inst STEY   ED66 RXYA           # STORE (S)
inst STHY   E370 RXYA           # STORE HALFWORD
inst STMY   EB90 RSYA           # STORE MULTIPLE
inst STY    E350 RXYA           # STORE (32)
inst SY     E35B RXYA           # SUBTRACT (3)
inst TMY    EB51 SIY            # TEST UNDER MASK
inst XIY    EB57 SIY            # EXCLUSIVE OR (IMMEDIATE)
inst XY     E357 RXYA           # EXCLUSIVE OR (32)

# See IBM z/Architecture Principles of Operation, SA22-7832-02, June, 2003
# LD instructions
iset s390x-long-distance
    mnemonics AHY ALY AY CDSY CHY CLIY CLMY CLY CSY CVBY CVDY CY ICMY ICY LAMY
    mnemonics LAY LB LDY LEY LGB LHY LMY LRAY LY MSY MVIY NIY NY OIY OY SHY
    mnemonics SLY STAMY STCMY STCY STDY STEY STHY STMY STY SY TMY XIY XY


# MESSAGE SECURITY ASSIST FACILITY (June, 2003)
inst KIMD   B93E RRE            # COMPUTE INTERMEDIATE MESSAGE DIGEST
inst KLMD   B93F RRE            # COMPUTE LAST MESSAGE DIGEST
inst KM     B92E RRE            # CIPHER MESSAGE
inst KMAC   B91E RRE            # COMPUTE MESSAGE AUTHENTIFICATION CODE
inst KMC    B92F RRE            # CIPHER MESSAGE WITH CHAINING

# See IBM z/Architecture Principles of Operation, SA22-7832-02, June, 2003
iset s390x-msa
    mnemonics KIMD KLMD KM KMAC KMC


# MESSAGE SECURITY ASSIST 3 FACILITY (August, 2010)
inst PCKMO  B928 RRE2    P      # PERFORM CRYPTOGRAPHIC KEY MANAGEMENT OPERATIONS

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# M3 instructions
iset s390x-msa-3
    mnemonics PCKMO


# MESSAGE SECURITY ASSIST 4 FACILITY (August, 2010)
inst KMCTR  B92D RRFI           # CIPHER MESSAGE WITH COUNTER
inst KMF    B92A RRE            # CIPHER MESSAGE WITH CFB
inst KMO    B92B RRE            # CIPHER MESSAGE WITH OFB
inst PCC    B92C RRE2           # PERFORM CRYPTOGRAPHIC COMPUTATION

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# M3 instructions
iset s390x-msa-4
    mnemonics KMCTR KMF KMO PCC


# MESSAGE SECURITY ASSIST 5 FACILITY (March, 2015)
inst PPNO   B93C RRE            # PERFORM PSEUDORANDOM NUMBER OPERATION
inst PRNO   B93C RRE            # PERFORM RANDOM NUMBER OPERATION
# Note: the PPNO instruction functionality was changed by SA22-7832-11,
# September, 2017.  The mnemonic was changed to reflect the change in function,
# but the machine instruction is the same as the previous implementation.

# See IBM z/Architecture Principles of Operation, SA22-7832-10, March, 2015
# M5 instructions
iset s390x-msa-5
    mnemonics PPNO
    mnemonics PRNO     # Added by SA22-7832-11, September, 2017


# MESSAGE SECURITY ASSIST 8 FACILITY (September, 2017)
inst KMA    B929 RRFB3          # CIPHER MESSAGE WITH AUTHENTICATION

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# M8 instruction
iset s390x-msa-8
    mnemonics KMA


# MESSAGE SECURITY ASSIST 8 FACILITY (May, 2022)
# M9 instuction
inst KDSA   B93A RRE            # COMPUTE DIGITAL SIGNATURE AUTHENTICATION

# See IBM z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# M8 instruction
iset s390x-msa-9
    mnemonics KDSA


# MISCELANEOUS-INSTUCTIONS-EXTENSION FACILITY 1
inst CLGT   EB2B RSYB           # COMPARE LOGICAL AND TRAP (64)
inst CLT    EB23 RSYB           # COMPARE LOGICAL AND TRAP (32)
inst RISBGN EC59 RIEF           # ROTATE THEN INSERT SELECTED BITS

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# MI instructions
iset s390x-misc-inst-ext
    mnemonics CLGT CLT RISBGN


# MISCELANEOUS-INSTUCTIONS-EXTENSION FACILITY 2
inst AGH    E338 RXYA           # ADD HALFWORD (64<-16)
inst BIC    E347 RXYB           # BRANCH INDIRECT ON CONDITION
inst MG     E384 RXYA           # MULTIPLY (128<-64)
inst MGRK   B9EC RRFA1          # MULTIPLY (128<-64)
inst MGH    E33C RXYA           # MULTIPLY HALFWORD (64<-16)
inst MSC    E353 RXYA           # MULTIPLY SINGLE (32)
inst MSRKC  B9FD RRFA1          # MULTIPLY SINGLE (32)
inst MSGC   E383 RXYA           # MULTIPLY SINGLE (64<-32)
inst MSGRKC B9ED RRFA1          # MULTIPLY SINGLE (64<-32)
inst SGH    E339 RXYA           # SUBTRACT HALFWORD (64<-16)

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# MI2 instructions
iset s390x-misc-inst-ext-2
    mnemonics AGH BIC MG MGRK MGH MSC MSRKC MSGC MSGRKC SGH


# MISCELANEOUS-INSTUCTIONS-EXTENSION FACILITY 3
inst NCRK   B9F5 RRFA1          # AND WITH COMPLEMENT (32)
inst NCGRK  B9E5 RRFA1          # AND WITH COMPLEMENT (64)
inst MVCRL  E50A SSE2           # MOVE RIGHT TO LEFT
inst NNRK   B974 RRFA1          # NAND (32)
inst NNGRK  B964 RRFA1          # NAND (64)
inst NORK   B976 RRFA1          # NOR (32)
inst NOGRK  B966 RRFA1          # NOR (64)
inst NXRK   B977 RRFA1          # NOT EXCLUSIVE OR (32)
inst NXGRK  B967 RRFA1          # NOT EXCLUSIVE OR (64)
inst OCRK   B975 RRFA1          # OR WITH COMPLEMENT (32)
inst OCGRK  B965 RRFA1          # OR WITH COMPLEMENT (64)
inst SELR   B9F0 RRFA2          # SELECT (32)
inst SELGR  B9E3 RRFA2          # SELECT (64)
inst SELFHR B9C0 RRFA2          # SELECT HIGH (32)

# See IBM z/Architecture Principles of Operation, SA22-7832-12, September, 2019
# MI3 instructions
iset s390x-misc-inst-ext-3
    mnemonics NCRK NCGRK MVCRL NNRK NNGRK NORK NOGRK NXRK NXGRK OCRK OCGRK
    mnemonics SELR SELGR SELFHR


# MOVE-WITH-OPTIONAL-SPECIFICATIONS FACILITY (February, 2008)
inst MVCOS  C80  SSF2           # MOVE WITH OPTIONAL SPECIFICATIONS

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# MO instruction
iset s390x-move-opt-spec
    mnemonics MVCOS


# PARSING-ENHANCEMENT FACILITY
inst TRTE   B9BF RRFC           # TRANSLATE AND TEST EXTENDED
inst TRTRE  B9BD RRFC           # TRANSLATE AND TEST REVERSE EXTENDED

# See IBM z/Architecture Principles of Operation, SA22-7832-06, February, 2008
# PE instructions
iset s390x-parsing-enh
    mnemonics TRTE TRTRE


# PFPO FACILITY
inst PFPO   010A E              # PERFORM FLOATING-POINT OPERATION

# See IBM z/Architecture Principles of Operation, SA22-7832-05, April, 2007
# PF instruction
iset s390x-pfpo
    mnemonics PFPO


# POPULATION COUNT FACILITY (August, 2010)
# MISCELANEOUS-INSTUCTION-EXTENSIONS FACILITY 3 (September, 2019)
inst POPCNT B9E1 RRFC           # POPULATION COUNT

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# PK instruction
# See IBM z/Architecture Principles of Operation, SA22-7832-12, September, 2019
# MI3 instructions
iset s390x-pop-count
     mnemonics POPCNT


# PROCESSOR ASSIST FACILITY (September, 2012)
inst PPA    B2E8 RRFC           # PERFORM PROCESSOR ASSIST

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# PA instruction
iset s390x-proc-assist
    mnemonics PPA


# PROCESSOR-ACTIVITY-INSTRUMENTATION FACILITY (May, 2022)
inst QPACI  B28F S0      P

# See IBM z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# PI instruction
iset s390x-processor-activity
    mnemonics QPACI


# RESET DAT-PROTECTION FACILITY (May, 2022)
inst RDP    B98B RRFB2   P

# See IBM z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# DP instruction
iset s390x-dat-protect
    mnemonics RDP


# RESET-REFERENCE-BITS-MULTIPLE FACILITY (August, 2010)
inst RRBM   B9AE RRE     P      # RESET REFERENCE BITS MULTIPLE

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# RB instruction
iset s390x-rrb-mult
     mnemonics RRBM


# SET-PROGRAM-PARAMATERS FACILITY (August, 2010)
inst LPP    B280 S0      P      # LOAD PROGRAM PARAMETER

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# See Load-Program-Parameter and the CPU-Measurement Facilities, SA23-2260-01,
# September, 2010

iset s390x-set-program-parms
    mnemonics LPP


# STORE-CLOCK-FAST FACILITY (September, 2005)
inst STCKF  B27C S0      P      # STORE CLOCK FAST

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# SC instruction
iset s390x-store-clock-fast
    mnemonics STCKF


# STORE-CPU-COUNTER-MULTIPLE FACILITY (March, 2015)
inst STCCTM EB17 RSYB           # STORE CPU COUNTER MULTIPLE

# See IBM z/Architecture Principles of Operation, SA22-7832-08, August, 2010
# See Load-Program-Parameter and the CPU-Measurement Facilities, SA23-2260-04,
# March, 2015
iset s390x-cpu-counter-mult
    mnemonics STCCTM


# STORE-FACILICY-LIST-EXTENDED FACILITY (September, 2005)
inst STFLE  B2B0 S0             # STORE FACILITY LIST EXTENDED

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# FL instruction

iset s390x-stfle
    mnemonics STFLE


# STORE-HYPERVISOR-INFORMATION FACILITY (March, 2015)
inst STHYI B256 RRE             # STORE HYPERVISOR INFORMATION

# See IBM z/VM CP Programming Services, Version 6, Release 4, SC24-6179-09, 2016
iset s390x-store-hypervisor
    mnemonics STHYI


# TEST-PENDING-EXTERNAL-INTERRUPTION FACILITY
inst TPEI   B9A1 RRE     P      # TEST PENDING EXTERNAL INTERRUPTION

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# TE instruction
iset s390x-test-ext-intrp
    mnemonics TPEI


# TOD-CLOCK-STEERING FACILITY (September, 2005)
inst PTFF   0104 E              # PERFORM TIMING FACILITY FUNCTION

# See IBM z/Architecture Principles of Operation, SA22-7832-04, September, 2005
# TS instruction

iset s390x-tod-steering
    mnemonics PTFF

# TRANSACTION EXECUTION FACILITY
inst ETND   B2EC RRE1           # EXTRACT TRANSACTION NESTING DEPTH
inst NTSTG  E325 RXYA           # NONTRANSACTIONAL STORE
inst TABORT B2FC S0             # TRANSACTION ABORT
inst TBEGIN E560 SIL            # TRANSACTION BEGIN
inst TEND   B2F8 RRE2           # TRANSACTION END

# See IBM z/Architecture Principles of Operation, SA22-7832-09, September, 2012
# TX instructions
iset s390x-trans-exe
    mnemonics ETND NTSTG TABORT TBEGIN TEND


# VECTOR-ENHANCEMENTS FACILITY 1
inst VBPERM E785 VRRC2          # VECTOR BIT PERMUTE
inst VFLL   E7C4 VRRA4          # VECTOR FP LOAD LENGTHENED (Renames VLDE)
inst VFLR   E7C5 VRRA           # VECTOR FP LOAD ROUNDED (EXTENDED!) (Renames VLED)
inst VFMAX  E7EF VRRC           # VECTOR FP MAXIMUM
inst VFMIN  E7EE VRRC           # VECTOR FP MINIMUM
inst VFNMA  E79F VRRE           # VECTOR FP NEGATIVE MULTIPLY AND ADD
inst VFNMS  E79E VRRE           # VECTOR FP NEGATIVE MULTIPLY AND SUBTRACT
inst VMSL   E7B8 VRRD           # VECTOR MULTIPLY SUM LOGICAL
inst VNN    E76E VRRC           # VECTOR NAND
inst VNX    E76C VRRC           # VECTOR NOT EXCLUSIVE OR
inst VOC    E76F VRRC           # VECTOR OR WITH COMPLEMENT

# See IBM z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# V1 instructions
iset s390x-vector-enh-fac-1
    mnemonics VBPERM VFLL VFLR VFMAX VFMIN VFNMA VFNMS VMSL VNN VNX VOC


# VECTOR FACILITY
inst LCBB   E727 RXFE           # LOAD COUNT TO BLOCK BOUNDARY (see Chapter 7)
inst VA     E7F3 VRRC1          # VECTOR ADD (EXTENDED!)
inst VAC    E7BB VRRD1          # VECTOR ADD WITH CARRY (EXTENDED!)
inst VACC   E7F1 VRRC1          # VECTOR ADD COMPUTE CARRY (EXTENDED!)
inst VACCC  E7B9 VRRD1          # VECTOR ADD WITH CARRY COMPUTE CARRY (EXTENDED!)
inst VAVG   E7F2 VRRC1          # VECTOR AVERAGE (EXTENDED!)
inst VAVGL  E7F0 VRRC1          # VECTOR AVERAGE LOGICAL (EXTENDED!)
inst VCDG   E7C3 VRRA           # VECTOR FP CONVERT FROM FIXED 64-BIT (EXTENDED!)
inst VCDLG  E7C1 VRRA           # VECTOR FP CONVERT FROM LOGICAL 64-BIT (EXTENDED!)
inst VCEQ   E7F8 VRRB           # VECTOR COMPARE EQUAL (EXTENDED!)
inst VCGD   E7C2 VRRA           # VECTOR FP CONVERT TO FIXED 64-BIT (EXTENDED!)
inst VCH    E7FB VRRB           # VECTOR COMPARE HIGH (EXTENDED!)
inst VCHL   E7F9 VRRB           # VECTOR COMPARE HIGH LOGICAL (EXTENDED!)
inst VCKSM  E766 VRRC2          # VECTOR CHECKSUM
inst VCLGD  E7C0 VRRA           # VECTOR FP CONVERT TO LOGICAL 64-BIT (EXTENDED!)
inst VCLZ   E753 VRRA1          # VECTOR COUNT LEADING ZEROS (EXTENDED!)
inst VCTZ   E752 VRRA1          # VECTOR COUNT TRAILING ZEROS (EXTENDED!)
inst VEC    E7DB VRRA1          # VECTOR ELEMENT COMPARE (EXTENDED!)
inst VECL   E7D9 VRRA1          # VECTOR ELEMENT COMPARE LOGICAL (EXTENDED!)
inst VERIM  E772 VRID           # VECTOR ELEMENT ROTATE AND INSERT UNDER MASK (EXTENDED!)
inst VERLL  E733 VRSA           # VECTOR ELEMENT ROTATE LEFT LOGICAL (EXTENDED!)
inst VERLLV E773 VRRC1          # VECTOR ELEMENT ROTATE LEFT LOGICAL (EXTENDED!)
inst VESL   E730 VRSA           # VECTOR ELEMENT SHIFT LEFT (EXTENDED!)
inst VESLV  E770 VRRC1          # VECTOR ELEMENT SHIFT LEFT (EXTENDED!)
inst VESRA  E73A VRSA           # VECTOR ELEMENT SHIFT RIGHT ARITHMETIC (EXTENDED!)
inst VESRAV E77A VRRC1          # VECTOR ELEMENT SHIFT RIGHT ARITHMETIC (EXTENDED!)
inst VESRL  E738 VRSA           # VECTOR ELEMENT SHIFT RIGHT LOGICAL (EXTENDED!)
inst VESRLV E778 VRRC1          # VECTOR ELEMENT SHIFT RIGHT LOGICAL (EXTENDED!)
inst VFA    E7E3 VRRC3          # VECTOR VP ADD (EXTENDED!)
inst VFAE   E782 VRRB           # VECTOR FIND ANY ELEMENT EQUAL (EXTENDED!)
inst VFCE   E7E8 VRRC           # VECTOR FP COMPARE EQUAL (EXTENDED!)
inst VFCH   E7EB VRRC           # VECTOR FP COMPARE HIGH (EXTENDED!)
inst VFCHE  E7EA VRRC           # VECTOR FP COMPARE HIGH OR EQUAL (EXTENDED!)
inst VFD    E7E5 VRRC3          # VECTOR FP DIVIDE (EXTENDED!)
inst VFEE   E780 VRRB           # VECTOR FIND ELEMENT EQUAL (EXTENDED!)
inst VFENE  E781 VRRB           # VECTOR FIND ELEMENT NOT EQUAL (EXTENDED!)
inst VFI    E7C7 VRRA           # VECTOR LOAD FP INTEGER (EXTENDED!)
inst VFM    E7E7 VRRC3          # VECTOR FP MULTIPLY (EXTENDED!)
inst VFMA   E78F VRRE           # VECTOR FP MULTIPLY AND ADD (EXTENDED!)
inst VFMS   E78E VRRE           # VECTOR FP MULTIPLY AND SUBTRACT (EXTENDED!)
inst VFPSO  E7CC VRRA           # VECTOR FP PERFORM SIGN OPERATION (EXTENDED!)
inst VFS    E7E2 VRRC3          # VECTOR FP SUBTRACT (EXTENDED!)
inst VFSQ   E7CE VRRA4          # VECTOR FP QUARE ROOT (EXTENDED!)
inst VFTCI  E74A VRIE           # VECTOR FP TEST DATA CLASS IMMEDIATE (EXTENDED!)
inst VGBM   E744 VRIA           # VECTOR GENERATE BYTE MASK (EXTENDED!)
inst VGEF   E713 VRV            # VECTOR GATHER ELEMENT (32)
inst VGEG   E712 VRV            # VECTOR GATHER ELEMENT (64)
inst VGFM   E7B4 VRRC1          # VECTOR GALOIS FIELD MULTIPLY SUM (EXTENDED!)
inst VGFMA  E7BC VRRD1          # VECTOR GALOIS FIELD MULTIPLY SUM AND ACCUMULATE (EXTENDED!)
inst VGM    E746 VRIB           # VECTOR GENERATE MASK (EXTENDED!)
inst VISTR  E75C VRRA3          # VECTOR ISOLATE STRING (EXTENDED!)
inst VL     E706 VRX1           # VECTOR LOAD (128)
inst VLBB   E707 VRX            # VECTOR LOAD TO BLOCK BOUNDARY
inst VLC    E7DE VRRA1          # VECTOR LOAD COMPLEMENT (EXTENDED!)
inst VLDE   E7C4 VRRA4          # VECTOR FP LOAD LENGTHENED (EXTENDED!)
inst VLEB   E700 VRX            # VECTOR LOAD ELEMENT (8)
inst VLED   E7C5 VRRA           # VECTOR FP LOAD ROUNDED (EXTENDED!)
inst VLEF   E703 VRX            # VECTOR LOAD ELEMENT (32)
inst VLEG   E702 VRX            # VECTOR LOAD ELEMENT (64)
inst VLEH   E701 VRX            # VECTOR LOAD ELEMENT (16)
inst VLEIB  E740 VRIA1          # VECTOR LOAD ELEMENT IMMEDIATE (8)
inst VLEIF  E743 VRIA1          # VECTOR LOAD ELEMENT IMMEDIATE (32)
inst VLEIG  E742 VRIA1          # VECTOR LOAD ELEMENT IMMEDIATE (64)
inst VLEIH  E741 VRIA1          # VECTOR LOAD ELEMENT IMMEDIATE (16)
inst VLGV   E721 VRSC           # VECTOR LOAD GR FROM VR ELEMENT (EXTENDED!)
inst VLL    E737 VRSB1          # VECTOR LOAD WITH LENGTH
inst VLLEZ  E704 VRX            # VECTOR LOAD LOGICAL ELEMENT AND ZERO (EXTENDED!)
inst VLM    E736 VRSA1          # VECTOR LOAD MULTIPLE
inst VLP    E7DF VRRA1          # VECTOR LOAD POSITIVE (EXTENDED!)
inst VLR    E756 VRRA2          # VECTOR LOAD (128)
inst VLREP  E705 VRX            # VECTOR LOAD AND REPLICATE (EXTENDED!)
inst VLVG   E722 VRSB           # VECTOR LOAD VR ELEMENT FROM GR (EXTENDED!)
inst VLVGP  E762 VRRF1          # VECTOR LOAD VR FROM GRS DISJOINT
inst VMAE   E7AE VRRD1          # VECTOR MULTIPLY AND ADD EVEN (EXTENDED!)
inst VMAH   E7AB VRRD1          # VECTOR MULTIPLY AND ADD HIGH (EXTENDED!)
inst VMAL   E7AA VRRD1          # VECTOR MULTIPLY AND ADD LOW (EXTENDED!)
inst VMALE  E7AC VRRD1          # VECTOR MULTIPLY AND ADD LOGICAL EVEN (EXTENDED!)
inst VMALH  E7A9 VRRD1          # VECTOR MULTIPLY AND ADD LOGICAL HIGH (EXTENDED!)
inst VMALO  E7AD VRRD1          # VECTOR MULTIPLY AND ADD LOGICAL ODD (EXTENDED!)
inst VMAO   E7AF VRRD1          # VECTOR MULTIPLY AND ADD ODD (EXTENDED!)
inst VME    E7A6 VRRC1          # VECTOR MULTIPLY EVEN (EXTENDED!)
inst VMH    E7A3 VRRC1          # VECTOR MULTIPLY HIGH (EXTENDED!)
inst VML    E7A2 VRRC1          # VECTOR MULTIPLY LOW (EXTENDED!)
inst VMLE   E7A4 VRRC1          # VECTOR MULTIPLY LOGICAL EVEN (EXTENDED!)
inst VMLH   E7A1 VRRC1          # VECTOR MULTIPLY LOGICAL HIGH (EXTENDED!)
inst VMLO   E7A5 VRRC1          # VECTOR MULTIPLY LOGICAL ODD (EXTENDED!)
inst VMN    E7FE VRRC1          # VECTOR MINIMUM (EXTENDED!)
inst VMNL   E7FC VRRC1          # VECTOR MINIMUM LOGICAL (EXTENDED!)
inst VMO    E7A7 VRRC1          # VECTOR MULTIPLY ODD (EXTENDED!)
inst VMRH   E761 VRRC1          # VECTOR MERGE HIGH (EXTENDED!)
inst VMRL   E760 VRRC1          # VECTOR MERGE LOW (EXTENDED!)
inst VMX    E7FF VRRC1          # VECTOR MAXIMUM (EXTENDED!)
inst VMXL   E7FD VRRC1          # VECTOR MAXIMUM LOGICAL (EXTENDED!)
inst VN     E768 VRRC2          # VECTOR AND
inst VNC    E769 VRRC2          # VECTOR AND WITH COMPLEMENT
inst VNO    E76B VRRC2          # VECTOR NOR
inst VO     E76A VRRC2          # VECTOR OR
inst VPDI   E784 VRRC1          # VECTOR PERMUTE DOUBLEWORD IMMEDIATE
inst VPERM  E78C VRRE1          # VECTOR PERMUTE
inst VPK    E794 VRRC1          # VECTOR PACK
inst VPKLS  E795 VRRB           # VECTOR PACK LOGICAL SATURATE (EXTENDED!)
inst VPKS   E797 VRRB           # VECTOR PACK SATURATE (EXTENDED!)
inst VPOPCT E750 VRRA1          # VECTOR POPULATION COUNT
inst VREP   E74D VRIC           # VECTOR REPLICATE (EXTENDED!)
inst VREPI  E745 VRIA1          # VECTOR REPLICATE IMMEDIATE (EXTENDED!)
inst VS     E7F7 VRRC1          # VECTOR SUBTRACT (EXTENDED!)
inst VSBI   E7BF VRRD1          # VECTOR SUBTRACT WITH BORROW INDICATION (EXTENDED!)
inst VSBCBI E7BD VRRD1          # VECTOR SUBTRACT WITH BORROW COMPUTE BORROW INDICATION (EXTENDED!)
inst VSCBI  E7F5 VRRC1          # VECTOR SUBTRACT COMPUTE BORROW INDICATION (EXTENDED!)
inst VSCEF  E71B VRV            # VECTOR SCATTER ELEMENT (32)
inst VSCEG  E71A VRV            # VECTOR SCATTER ELEMENT (64)
inst VSEG   E75F VRRA1          # VECTOR SIGN EXTEND TO DOUBLEWORD (EXTENDED!)
inst VSEL   E78D VRRE1          # VECTOR SELECT
inst VSL    E774 VRRC2          # VECTOR SHIFT LEFT
inst VSLB   E775 VRRC2          # VECTOR SHIFT LEFT BY BYTE
inst VSLDB  E777 VRID1          # VECTOR SHIFT LEFT DOUBLE BY BYTE
inst VSRA   E77E VRRC2          # VECTOR SHIFT RIGHT ARITHMETIC
inst VSRAB  E77F VRRC2          # VECTOR SHIFT RIGHT ARITHMETIC BY BYTE
inst VSRL   E77C VRRC2          # VECTOR SHIFT RIGHT LOGICAL
inst VSRLB  E77D VRRC2          # VECTOR SHIFT RIGHT LOGICAL BY BYTE
inst VST    E70E VRX1           # VECTOR STORE (128)
inst VSTEB  E708 VRX            # VECTOR STORE ELEMENT (8)
inst VSTEF  E70B VRX            # VECTOR STORE ELEMENT (32)
inst VSTEG  E70A VRX            # VECTOR STORE ELEMENT (64)
inst VSTEH  E709 VRX            # VECTOR STORE ELEMENT (16)
inst VSTL   E73F VRSB1          # VECTOR STORE WITH LENGTH
inst VSTM   E73E VRSA1          # VECTOR STORE MULTIPLE
inst VSTRC  E78A VRRD           # VECTOR STRING RANGE COMPARE (EXTENDED!)
inst VSUM   E764 VRRC1          # VECTOR SUM ACROSS WORD (EXTENDED!)
inst VSUMG  E765 VRRC1          # VECTOR SUM ACROSS DOUBLEWORD (EXTENDED!)
inst VSUMQ  E767 VRRC1          # VECTOR SUM CROSS QUADWORD (EXTENDED!)
inst VTM    E7D8 VRRA2          # VECTOR TEST UNDER MASK
inst VUPH   E7D7 VRRA1          # VECTOR UNPACK HIGH (EXTENDED!)
inst VUPL   E7D6 VRRA1          # VECTOR UNPACK LOW (EXTENDED!)
inst VUPLH  E7D5 VRRA1          # VECTOR UNPACK LOGICAL HIGH (EXTENDED!)
inst VUPLL  E7D4 VRRA1          # VECTOR UNPACK LOGICAL LOW (EXTENDED!)
inst VX     E76D VRRC2          # VECTOR EXCLUSIVE OR
inst WFC    E7CB VRRA4          # VECTOR FP COMPARE SCALAR (EXTENDED!)
inst WFK    E7CA VRRA4          # VECTOR FP COMPARE AND SIGNAL SCALAR (EXTENDED!)

# See IBM z/Architecture Principles of Operation, SA22-7832-10, March, 2015
# VF instructions
iset s390x-vector
    mnemonics LCBB VA VAC VACC VACCC VAVG VAVGL VCDG VCDLG VCEQ VCGD VCH VCHL VCKSM VCLGD
    mnemonics VCLZ VCTZ VEC VECL VERIM VERLL VERLLV VESL VESLV VESRA VESRAV VESRL
    mnemonics VESRLV VFA VFAE VFCE VFCH VFCHE VFD VFEE VFENE VFI VFM VFMA VFPSO VFS
    mnemonics VFSQ VFTCI VGBM VGEF VGEG VGFM VGFMA VFMS VGM VISTR VL VLBB VLC VLDE VLEB
    mnemonics VLED VLEF VLEG VLEH VLEIB VLEIF VLEIG VLEIH VLGV VLL VLLEZ VLM VLP VLR VLVG
    mnemonics VLVGP VMAE VMAH VMAL VMALE VMALH VMALO VMAO VME VMH VML VMLE VMLH VMLO
    mnemonics VMN VMNL VMO VMRH VMRL VMX VMXL VN VNC VNO VO VPDI VPERM VPK VPKLS VPKS VPOPCT
    mnemonics VREP VREPI VS VSBCBI VSBI VSCBI VSCEF VSCEG VSEG VSEL VSL VSLB VSLDB VSRA
    mnemonics VSRAB VSRL VSRLB VST VSTEB VSTEF VSTEG VSTEH VSTL VSTM VSTRC VSUM
    mnemonics VSUMG VSUMQ VTM VUPH VUPL VUPLH VUPLL VX WFC WFK


# VECTOR PACKED-DECIMAL FACILITY
inst VAP    E671 VRIF           # VECTOR ADD DECIMAL
inst VCP    E677 VRRH           # VECTOR COMPARE DECIMAL
inst VCVB   E650 VRRI           # VECTOR CONVERT TO BINARY
inst VCVBG  E652 VRRI           # VECTOR CONVERT TO BINARY
inst VCVD   E658 VRII           # VECTOR CONVERT TO DECIMAL
inst VCVDG  E65A VRII           # VECTOR CONVERT TO DECIMAL
inst VDP    E67A VRIF           # VECTOR DIVIDE DECIMAL
inst VLIP   E649 VRIH           # VECTOR LOAD IMMEDIATE DECIMAL
inst VLRL   E635 VSI            # VECTOR LOAD RIGHTMOST WITH LENGTH
inst VLRLR  E637 VRSD           # VECTOR LOAD RIGHTMOST WITH LENGTH
inst VMP    E678 VRIF           # VECTOR MULTIPLY DECIMAL
inst VMSP   E679 VRIF           # VECTOR MULTIPLY AND SHIFT DECIMAL
inst VPKZ   E634 VSI            # VECTOR PACK ZONED
inst VPSOP  E65B VRIG           # VECTOR PERFORM SIGN OPERATION DECIMAL
inst VRP    E67B VRIF           # VECTOR REMAINDER DECIMAL
inst VSDP   E67E VRIF           # VECTOR SHIFT AND DIVIDE DECIMAL
inst VSP    E673 VRIF           # VECTOR SUBTRCT DECIMAL
inst VSRP   E659 VRIG           # VECTOR SHIFT AND ROUND DECIMAL
inst VSTRL  E63D VSI            # VECTOR STORE RIGHTMOST WITH LENGTH
inst VSTRLR E63F VRSD           # VECTOR STORE RIGHTMOST WITH LENGTH
inst VTP    E65F VRRG           # VECTOR TEST DECIMAL
inst VUPKZ  E63C VSI            # VECTOR UNPACK ZONED

# See z/Architecture Principles of Operation, SA22-7832-11, September, 2017
# VD instructions
iset s390x-vector-packed-1
    mnemonics VAP VCP VCVB VCVBG VCVD VCVDG VDP VLIP VLRL VLRLR VMP VMSP VPKZ
    mnemonics VPSOP VRP VSDP VSP VSRP VSTRL VSTRLR VTP VUPKZ


# VECTOR-ENHANCEMENTS FACILITY 2
inst VCFPL   E7C1 VRRA           # VECTOR FP CONVERT FROM LOGICAL (rename VCDGL)
inst VCFPS   E7C3 VRRA           # VECTOR FP CONVERT FROM FIXED (rename VCDG)
inst VCLFP   E7C0 VRRA           # VECTOR FP CONVERT TO LOGICAL (rename VCLDG)
inst VCSFP   E7C2 VRRA           # VECTOR FP CONVER TO FIXED (rename VCDG)
inst VLBR    E606 VRX            # VECTOR LOAD ELEMENT
inst VLBRREP E605 VRX            # VECTOR LOAD BYTE REVERSED ELEMENT AND REPLICATE
inst VLEBRF  E603 VRX            # VECTOR LOAD BYTE REVERSED ELEMENT (32)
inst VLEBRH  E601 VRX            # VECTOR LOAD BYTE REVERSED ELEMENT (16)
inst VLEBRG  E602 VRX            # VECTOR LOAD BYTE REVERSED ELEMENT (64)
inst VLER    E607 VRX            # VECTOR LOAD ELEMENTS REVERSED
inst VLLEBRZ E604 VRX            # VECTOR LOAD BYTE REVERSED ELEMENT AND ZERO
inst VSLD    E786 VRID1          # VECTOR SHIFT LEFT DOUBLE BY BIT
inst VSRD    E787 VRID1          # VECTOR SHIFT RIGHT DOUBLE BY BIT
inst VSTBR   E60E VRX            # VECTOR STORE BYTE REVERSED ELEMENTS
inst VSTEBRF E60B VRX            # VECTOR STORE BYTE REVERSED ELEMENT (32)
inst VSTEBRH E609 VRX            # VECTOR STORE BYTE REVERSED ELEMENT (16)
inst VSTEBRG E60A VRX            # VECTOR STORE BYTE REVERSED ELEMENT (64)
inst VSTER   E60F VRX            # VECTOR STORE ELEMENTS REVERSED
inst VSTRS   E78B VRRD           # VECTOR STRING SEARCH

# See z/Architecture Principles of Operation, SA22-7832-12, September, 2019
# V2 instructions
iset s390x-vector-2
    mnemonics VCFPL VCFPS VCLFP VCSFP
    mnemonics VLBR VLBRREP VLEBRF VLEBRH VLEBRG VLER VLLEBRZ VSLD VSRD VSTBR
    mnemonics VSTEBRF VSTEBRH VSTEBRG VSTER VSTRS


# DEFLATE-CONVERSION FACILITY
inst DFLTCC B939 RRFA1          # DEFLATE CONVERSION CALL

# See z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# GZ instruction
iset s390x-deflate
    mnemonics DFLTCC


# ENHANCED-SORT FACILITY
inst SORTL  B938 RRE            # SORT LISTS

# See z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# SL instruction
iset s390x-enhanced-sort
    mnemonics SORTL


# NEURAL-NETWORK-PROCESSING-ASSIST FACILITY
inst NNPA   B93B RRE1           # NEURAL NETOWRK PROCESSING ASSIST
inst VCFN   E65D VRRA4          # VECTOR FP CONVERT FROM NNP
inst VCLFNH E656 VRRA4          # VECTOR FP CONVERT AND LENGTHEN FROM NNP HIGH
inst VCLFNL E65E VRRA4          # VECTOR FP CONVERT AND LENGTHEN FROM NNP LOW
inst VCNF   E655 VRRA4          # VECTOR FP CONVERT TO NNP
inst VCRNF  E675 VRRC3          # VECTOR FP CONVERT AND ROUDN TO NNP

# See z/Architecture Principles of Operation, SA22-7832-13, May, 2022
# NN instructions
iset s390x-neural-network
    mnemonics NNPA VCFN VCLFNH VCLFNL VCNF VCRNF


# VECTOR-PACKED-DECIMAL-ENHANCEMENT FACILITY 2
inst VCLZDP E651  VRRK           # VECTOR COUNT LEADING ZERO DIGITS
inst VCSPH  E67D  VRRJ           # VECTOR CONVERT HFP TO SCALED DECIMAL
inst VPKZR  E670  VRIF           # VECTOR PACK ZONED REGISTER
inst VSCHP  E674  VRRB           # DECIMAL SCALE AND CONVERT TO HFP
inst VSCSHP E67C  VRRC           # DECIMAL SCALE AND CONVERT AND SPLIT TO HFP
inst VSRPR  E672  VRIF           # VECTOR SHIFT AND ROUND DECIMAL REGISTER
inst VUPKZH E654  VRRK           # VECTOR UNPACK ZONED HIGH
inst VUPKZL E65C  VRRK           # VECTOR UNPACK ZONES LOW

# See z/Architecture Principles of Operation, SA22-7832-12, May, 2022
iset s390x-vector-packed-2
# VD2 instructions
    mnemonics VCLZDP VCSPH VPKZR VSCHP VSCSHP VSRPR VUPKZH VUPKZL


# VM SPECIFIC
inst IUCV  B2F0 S0       P      # INTER-USER COMMUNICATIONS VEHICLE

iset s390x-vm
    mnemonics IUCV


# z/Architecture Extended Mnemonics
include zem-insn.msl
