# Copyright (C) 2014-2024 Harold Grovesteen
#
# This file is part of SATK.
#
#     SATK is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     SATK is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with SATK.  If not, see <http://www.gnu.org/licenses/>.

# System/360 instructions and instruction sets in Machine Specification Language

# Include machine instruction formats
# Uses MSLPATH when searching for include files
include formats.msl

cpu s360         # Generic S/360 CPU
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io
    features s360-DECIMAL s360-DIRECT s360-HFP s360-PROTECTION

cpu 2020
    addrmax 16
    ccw CCW0
    psw PSWS
    base s360-20-io s360-extended
    # Standard instructions available on the 2020
    include AH AR BC BCR CH CLC CLI DIAG LH MVC MVI MVN MVO MVZ NI OI PACK SH SR STH
    include TM TR UNPK
    # Decimal instructions available on the 2020
    include AP CP DP ED MP SP ZAP
    # Instructions unique to the 2020
    include BAS BASR HPR SPSW

cpu 2025
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io s360-DECIMAL
    features s360-DIRECT s360-HFP s360-PROTECTION

cpu 2030
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io
    features s360-DIRECT s360-DECIMAL s360-HFP s360-PROTECTION

cpu 2040
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io
    features s360-DIRECT s360-DECIMAL s360-HFP s360-PROTECTION

cpu 2044
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended
    features s360-DIRECT-WORD s360-HFP s360-PRIORITY-INTERRUPT s360-PROTECTION
    exclude BCTR BXH BXLE CLC CVB CVD DIAG EX LM MVC MVN MVO MVZ NC OC PACK STM TR TRT
    exclude UNPK XC 

cpu 2050
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-HFP s360-PROTECTION
    features s360-DIRECT

cpu 2065
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-HFP s360-PROTECTION
    features s360-DIRECT

cpu 2067
    addrmax 24
    ccw CCW0
    psw PSW67
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-HFP s360-PROTECTION
    features s360-DIRECT
    include BAS BASR LMC LRA STMC

cpu 2075
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-DIRECT s360-HFP s360-PROTECTION

cpu 2085
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-EPHFP s360-HFP s360-PROTECTION

cpu 2091
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-DIRECT s360-HFP s360-PROTECTION

cpu 2195
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-io 
    base s360-DECIMAL s360-DIRECT s360-HFP s360-PROTECTION

cpu NSSC2
    addrmax 24
    ccw CCW0
    psw PSW360
    base s360-base s360-extended s360-PROTECTION
    features s360-DHFP s360-SHFP s360-SHORT-PRECISION
    exclude ISK
    include SION
    rename SION SIO

# DECIMAL INSTRUCTION FEATURE
inst AP     FA   SSB            # ADD DECIMAL
inst CP     F9   SSB            # COMPARE DECIMAL
inst DP     FD   SSB            # DIVIDE DECIMAL
inst ED     DE   SSA            # EDIT
inst EDMK   DF   SSA            # EDIT AND MARK
inst MP     FC   SSB            # MULTIPLY DECIMAL
inst SP     FB   SSB            # SUBTRACT DECIMAL
inst ZAP    F8   SSB            # ZERO AND ADD

iset s360-DECIMAL
    mnemonics AP CP DP ED EDMK MP SP ZAP


# DIRECT CONTROL FEATURE
inst RDD    85   SI      P      # READ DIRECT
inst WRD    84   SI      P      # WRITE DIRECT

iset s360-DIRECT
    mnemonics RDD WRD


# DIRECT WORD FEATURE
inst RDDW   B5   SI      P      # READ DIRECT WORD
inst WRDW   B4   SI      P      # WRITE DIRECT WORD

iset s360-DIRECT-WORD
    mnemonics RDDW WRDW


# EXTENDED PRECISION HEXADECIMAL FLOATING POINT FEATURE
inst AXR    36   RR             # ADD NORMALIZED (EH)
inst LRDR   25   RR             # LOAD ROUNDED (LH<EH)
inst LRER   35   RR             # LOAD ROUNDED (SH<LH)
inst MXD    67   RXA            # MULTIPLY (EH<LH)
inst MXDR   27   RR             # MULTIPLY (EH<LH)
inst MXR    26   RR             # MULTIPLY (EH)
inst SXR    37   RR             # SUBTRACT NORMALIZED (EH)

iset s360-EPHFP
    mnemonics AXR LRDR LRER MXD MXDR MXR SXR


# HEXADECIMAL FLOATING POINT INSTRUCTION FEATURE
inst AD     6A   RXA            # ADD NORMALIZED (LH)
inst ADR    2A   RR             # ADD NORMALIZED (LH)
inst AE     7A   RXA            # ADD NORMALIZED (SH
inst AER    3A   RR             # ADD NORMALIZED (SH)
inst AU     7E   RXA            # ADD UNNORMALISZE (SH)
inst AUR    3E   RR             # ADD UNNORMALIZED (SH)
inst AW     6E   RXA            # ADD UNNORMALIZED (LH)
inst AWR    2E   RR             # ADD UNNORMALIZED (LH)
inst CD     69   RXA            # COMPARE (LH)
inst CDR    29   RR             # COMPARE (LH)
inst CE     79   RXA            # COMPARE (SH)
inst CER    39   RR             # COMPARE (SH)
inst DD     6D   RXA            # DIVIDE (LH)
inst DDR    2D   RR             # DIVIDE (LH)
inst DE     7D   RXA            # DIVIDE (SH)
inst DER    3D   RR             # DIVIDE (SH)
inst HDR    24   RR             # HALVE (LH)
inst HER    34   RR             # HALVE (SH)
inst LCDR   23   RR             # LOAD COMPLEMENT (LH)
inst LCER   33   RR             # LOAD COMPLEMENT (SH)
inst LD     68   RXA            # LOAD (LH)
inst LDR    28   RR             # LOAD (LH)
inst LE     78   RXA            # LOAD (SH)
inst LER    38   RR             # LOAD (SH)
inst LNDR   21   RR             # LOAD NEGATIVE (LH)
inst LNER   31   RR             # LOAD NEGATIVE (SH)
inst LPDR   20   RR             # LOAD POSITIVE (LH)
inst LPER   30   RR             # LOAD POSITIVE (SH)
inst LTDR   22   RR             # LOAD AND TEST (LH)
inst LTER   32   RR             # LOAD AND TEST (SH)
inst MD     6C   RXA            # MULTIPLY (LH)
inst MDR    2C   RR             # MULTIPLY (LH)
inst ME     7C   RXA            # MULTIPLY (SH)
inst MER    3C   RR             # MULTIPLY (SH)
inst SD     6B   RXA            # SUBTRACT NORMALIZED (LH)
inst SDR    2B   RR             # SUBTRACT NORMALIZED (LH)
inst SE     7B   RXA            # SUBTRACT NORMALIZED (SH)
inst SER    3B   RR             # SUBTRACT NORMALIZED (SH)
inst STD    60   RXA            # STORE (L)
inst STE    70   RXA            # STORE (S)
inst SU     7F   RXA            # SUBTRACT UNNORMALIZED (SH)
inst SUR    3F   RR             # SUBTRACT UNNORMALIZED (SH)
inst SW     6F   RXA            # SUBTRACT UNNORMALIZED (LH)
inst SWR    2F   RR             # SUBTRACT UNNORMALIZED (LH)

iset s360-HFP
    mnemonics AD ADR AE AER AU AUR AW AWR CD CDR CE CER DD DDR DE DER HDR HER LCDR LCER
    mnemonics LD LDR LE LER LNDR LNER LPDR LPER LTDR LTER MD MDR ME MER SD SDR SE SER 
    mnemonics STD STE SU SUR SW SWR

iset s360-DHFP                  # DOUBLE PRECISION FLOATING POINT FEATURE
    mnemonics AD ADR CD CDR LCDR LD LDR SD SDR STD

iset s360-SHFP                  # SINGLE PRECISION FLOATING POINT FEATURE
    mnemonics AE AER AU AUR CE CER DE DER HER LCER LE LER LNER LPER LTER ME MER SE SER
    mnemonics STE SU SUR


# PRIORITY INTERRUPT FEATURE
inst CHPM   B3   SI      P      # CHANGE PRIORITY MASK
inst LPSX   B2   S0      P      # LOAD PROGRAM STATUS WORD SPECIAL

iset s360-PRIORITY-INTERRUPT
    mnemonics CHPM LPSX


# PROTECTION FEATURE
inst ISK    09   RR      P      # INSERT STORAGE KEY
inst SSK    08   RR      P      # SET STORAGE KEY

iset s360-PROTECTION
    mnemonics ISK SSK


# REAL-TIME CLOCK FEATURE
inst TMRS   A4   RSA     P      # TIMER READ AND SET


# SHORT PRECISION FEATURE
inst AHI    BA0   RIA           # ADD HALFWORD (immediate)
inst AS     53    RXA           # ADD SHORT (32<16)
inst ASI    AA    RIA           # ADD SHORT (immediate)
inst ASR    CA    RR     L      # ADD SHORT (32<16)        <---VIOLATES BITS 0,1 rules
inst BU     730   ERXB          # BRANCH UNCONDITIONAL
inst BUR    CE    RN     L      # BRANCH UNCONDITIONAL     <---VIOLATES BITS 0,1 rules
inst CHI    B9    RIA           # COMPARE HALFWORD (immediate)
inst CLS    65    RXA           # COMPARE LOGICAL SHORT
inst CLSI   B5    RIN           # COMPARE LOGICAL SHORT (immediate)
inst CLSR   C5    RR     L      # COMPARE LOGICAL SHORT    <---VIOLATES BITS 0,1 rules
inst CS     61    RXA           # COMPARE SHORT
inst CSI    A9    RIA           # COMPARE SHORT (immediate)
inst CSR    C9    RR     L      # COMPARE SHORT            <---VIOLATES BITS 0,1 rules
inst DS     4D    RXA           # DIVIDE SHORT
inst DSI    B0    RIA           # DIVIDE SHORT (immediate)
inst DSR    CD    RR     L      # DIVIDE SHORT             <---VIOLATES BITS 0,1 rules
inst LAS    51    RXA           # LOAD ADDRESS SHORT
inst LCSR   C3    RR     L      # LOAD COMPLEMENT SHORT    <---VIOLATES BITS 0,1 rules
inst LFSR   0B    RR            # LOAD FULL TO SHORT
inst LHI    B8    RIA           # LOAD HALFWORD
inst LHR    D0    RR     L      # LOAD HALFWORD            <---VIOLATES BITS 0,1 rules
inst LNSR   C1    RR     L      # LOAD NEGATIVE SHORT      <---VIOLATES BITS 0,1 rules
inst LPSR   C0    RR     L      # LOAD POSITIVE SHORT      <---VIOLATES BITS 0,1 rules
inst LS     74    RXA           # LOAD SHORT
inst LSI    A8    RIA           # LOAD SHORT (immediate)
inst LSR    C8    RR     L      # LOAD SHORT               <---VIOLATES BITS 0,1 rules
inst LT     62    RXA           # LOAD AND TEST (32)
inst LTS    52    RXA           # LOAD AND TEST SHORT (16)
inst LTSR   C2    RR     L      # LOAD AND TEST SHORT (16) <---VIOLATES BITS 0,1 rules
inst MHI    BC    RIA           # MULTIPLY HALFWORD (immediate)
inst MS     71    RXA           # MULTIPLY SHORT (32<16)
inst MSI    B3    RIA           # MULTIPLY SHORT (immediate)
inst MSR    CC    RR     L      # MULTIPLY SHORT (32<16)   <---VIOLATES BITS 0,1 rules
inst NRM    CF    RR     L      # NORMALIZE                <---VIOLATES BITS 0,1 rules
inst NS     64    RXA           # AND SHORT
inst NSI    B4    RIN           # AND SHORT (immediate)
inst NSR    C4    RR     L      # AND SHORT                <---VIOLATES BITS 0,1 rules
inst OS     66    RXA           # OR SHORT
inst OSI    A6    RIN           # OR SHORT
inst OSR    C6    RR     L      # OR SHORT                 <---VIOLATES BITS 0,1 rules
inst SHI    BB    RIA           # SUBTRACT HALFWORD
inst SLAS   A3    RSA1          # SHIFT LEFT ARITHMETIC SHORT
inst SLLS   A1    RSA1          # SHIFT LEFT LOGICAL SHORT
inst SRAS   A2    RSA1          # SHIFT RIGHT ARITHMETIC SHORT
inst SRLS   A0    RSA1          # SHIFT RIGHT LOGICAL SHORT
inst SS     72    RXA           # SUBTRACT SHORT
inst SSI    AB    RIA           # SUBTRACT SHORT (immediate)
inst SSR    CB    RR     L      # SUBTRACT SHORT           <---VIOLATES BITS 0,1 rules
inst TB     75    RXA           # TEST BITS
inst TBI    AE    RIN           # TEST BITS (immediate)
inst XS     63    RXA           # EXCLUSIVE OR SHORT
inst XSI    A7    RIN           # EXCLUSIZE OR SHORT (immediate)
inst XSR    C7    RR     L      # EXCLUSIVE OR SHORT       <---VIOLATES BITS 0,1 rules

iset s360-SHORT-PRECISION
    mnemonics AHI AS ASI ASR BU BUR CHI CLS CLSI CLSR CS CSI CSR DS DSI DSR LAS LCSR
    mnemonics LFSR LHI LHR LNSR LPSR LS LSI LSR LT LTS LTSR MHI MS MSI MSR NRM NS NSI
    mnemonics NSR OS OSI OSR SHI SLAS SLLS SRAS SRLS SS SSI SSR TB TBI XS XSI XSR


# STANDARD INSTRUCTIONS (see below for I/O instructions)
inst A      5A   RXA            # ADD (32)
inst AH     4A   RXA            # ADD HALFWORD
inst AL     5E   RXA            # ADD LOGICAL (32)
inst ALR    1E   RR             # ADD LOGICAL (32)
inst AR     1A   RR             # ADD (32)
inst BAL    45   RXA            # BRANCH AND LINK
inst BALR   05   RR             # BRANCH AND LINK
inst BC     47   RXA            # BRANCH ON CONDITION
inst BCR    07   RR             # BRANCH ON CONDITION
inst BCT    46   RXA            # BRANCH ON COUNT (32)
inst BCTR   06   RR             # BRANCH ON COUNT (32)
inst BXH    86   RSA            # BRANCH ON INDEX HIGH (32)
inst BXLE   87   RSA            # BRANCH ON INDEX LOW OR EQUAL (32)
inst C      59   RXA            # COMPARE (32)
inst CH     49   RXA            # COMPARE HALFWORD
inst CL     55   RXA            # COMPARE LOGICAL (32)
inst CLI    95   SI             # COMPARE LOGICAL (immediate)
inst CLC    D5   SSA            # COMPARE LOGICAL (character)
inst CLR    15   RR             # COMPARE LOGICAL (32)
inst CR     19   RR             # COMPARE (32)
inst CVB    4F   RXA            # CONVERT TO BINARY (32)
inst CVD    4E   RXA            # CONVERT TO DECIMAL (32)
inst D      5D   RXA            # DIVIDE (32<64)
inst DIAG   83   RSA     P      # DIAGNOSE
inst DR     1D   RR             # DIVIDE
inst EX     44   RXA            # EXECUTE
inst IC     43   RXA            # INSERT CHARACTER
inst L      58   RXA            # LOAD (32)
inst LA     41   RXA            # LOAD ADDRESS
inst LCR    13   RR             # LOAD COMPLEMENT (32)
inst LH     48   RXA            # LOAD HALFWORD
inst LM     98   RSA            # LOAD MULTIPLE (32)
inst LNR    11   RR             # LOAD NEGATIVE (32)
inst LPR    10   RR             # LOAD POSITIVE (32)
inst LPSW   8200 S0      P      # LOAD PROGRAM STATUS WORD
inst LR     18   RR             # LOAD (32)
inst LTR    12   RR             # LOAD AND TEST (32)
inst M      5C   RXA            # MULTIPLY (64<32)
inst MH     4C   RXA            # MULTIPLY HALFWORD (32)
inst MR     1C   RR             # MULTIPLY (63<32)
inst MVC    D2   SSA            # MOVE (character)
inst MVI    92   SI             # MOVE (immediate)
inst MVN    D1   SSA            # MOVE NUMERICS
inst MVO    F1   SSB            # MOVE WITH OFFSET
inst MVZ    D3   SSA            # MOVE NUMERICS
inst N      54   RXA            # AND (32)
inst NC     D4   SSA            # AND (character)
inst NI     94   SI             # AND (immediate)
inst NR     14   RR             # AND (32)
inst O      56   RXA            # OR (32)
inst OC     D6   SSA            # OR (character)
inst OI     96   SI             # OR (immediate)
inst OR     16   RR             # OR (32)
inst PACK   F2   SSB            # PACK
inst S      5B   RXA            # SUBTRACT (32)
inst SH     4B   RXA            # SUBTRACT HALFWORD
inst SL     5F   RXA            # SUBTRACT LOGICAL (32)
inst SLA    8B   RSA1           # SHIFT LEFT SINGLE
inst SLDA   8F   RSA1           # SHIFT LEFT DOUBLE
inst SLDL   8D   RSA1           # SHIFT LEFT DOUBLE LOGICAL
inst SLL    89   RSA1           # SHIFT LEFT SINGLE LOGICAL (32)
inst SLR    1F   RR             # SUBTRACT LOGICAL (32)
inst SPM    04   RR      P      # SET PROGRAM MASK
inst SR     1B   RR             # SUBTRACT (32)
inst SRA    8A   RSA1           # SHIFT RIGHT SINGLE
inst SRDA   8E   RSA1           # SHIFT RIGHT DOUBLE
inst SRDL   8C   RSA1           # SHIFT RIGHT DOUBLE LOGICAL
inst SRL    88   RSA1           # SHIFT RIGHT SINGLE LOGICAL (32)
inst SSM    8000 S0      P      # SET SYSTEM MASK
inst ST     50   RXA            # STORE (32)
inst STC    42   RXA            # STORE CHARACTER
inst STH    40   RXA            # STORE HALFWORD
inst STM    90   RSA            # STORE MULTIPLE (32)
inst SVC    0A   I              # SUPERVISOR CALL
inst TM     91   SI             # TEST UNDER MASK
inst TR     DC   SSA            # TRANSLATE
inst TRT    DD   SSA            # TRANSLATE AND TEST
inst TS     9300 S0             # TEST AND SET
inst UNPK   F3   SSB            # UNPACK
inst X      57   RXA            # EXCLUSIVE OR (32)
inst XC     D7   SSA            # EXCLUSIVE OR (character)
inst XI     97   SI             # EXCLUSIVE OR (immediate)
inst XR     17   RR             # EXCLUSIVE OR (32)


# STANDARD EXTENDED MNEMONICS
inst B      47F  ERXB    E      # BC  15,D1(X1,B1)  Unconditional branch
inst BE     478  ERXB    E      # BC  8,D1(X1,B1)   Branch on A equal B
inst BER    078  ER      E      # BCR 8,R           Branch on A equal B (reg)
inst BH     472  ERXB    E      # BC  2,D1(X1,B1)   Branch on A higher than B
inst BHR    072  ER      E      # BCR 2,R           Branch on A higher than B (reg)
inst BL     474  ERXB    E      # BC  4,D1(X1,B1)   Branch on A lower than B
inst BLR    074  ER      E      # BCR 4,R           Branch on A lower than B (reg)
inst BM     474  ERXB    E      # BC  4,D1(X1,B1)   Branch on Minus or Mixed
inst BMR    074  ER      E      # BCR 4,R           Branch on Minus or Mixed (reg)
inst BNE    477  ERXB    E      # BC  7,D1(X1,B1)   Branch on A not equal B
inst BNER   077  ER      E      # BCR 8,R           Branch on A not equal B (reg)
inst BNH    47D  ERXB    E      # BC  13,D1(X1,B1)  Branch on A not higher than B
inst BNHR   07D  ER      E      # BCR 13,R          Branch on A not higher than B (reg)
inst BNL    47B  ERXB    E      # BC  11,D1(X1,B1)  Branch on A not lower than B
inst BNLR   07B  ER      E      # BCR 11,R          Branch on A not lower than B (reg)
inst BNM    47B  ERXB    E      # BC  11,D1(X1,B1)  Branch on not minus or not mixed
inst BNMR   07B  ER      E      # BC  11,R          Branch on not minur or not mixed (reg)
inst BNO    47E  ERXB    E      # BC  14,D1(X1,B1)  Branch on no overflow or not ones
inst BNOR   07E  ER      E      # BCR 14,R          Branch on no overflow or not ones (reg)
inst BNP    47D  ERXB    E      # BC  13,D1(X1,B1)  Branch on not plus
inst BNPR   07D  ER      E      # BCR 13,R          Branch on not plus (reg)
inst BNZ    477  ERXB    E      # BC  7,D1(X1,B1)   Branch on not zero or zeros
inst BNZR   077  ER      E      # BCR 7,R           Branch on not zero or zeros (reg)
inst BO     471  ERXB    E      # BC  1,D1(X1,B1)   Branch on overflow or ones
inst BOR    071  ER      E      # BCR 1,R           Branch on overflow or ones (reg)
inst BP     472  ERXB    E      # BC  2,D1(X1,B1)   Branch on plus
inst BPR    072  ER      E      # BCR 2,R           Branch on plus (reg)
inst BR     07F  ER      E      # BCR 15,R          Unconditional branch (reg)
inst BZ     478  ERXB    E      # BC  8,D1(X1,B1)   Branch on zero or zeros
inst BZR    078  ER      E      # BCR 8,R           Branch on zero or zeros (reg)
inst NOP    470  ERXB    E      # BC  0,D1(X1,B1)   no operation
inst NOPR   070  ER      E      # BCR 0,R           no operation (reg)

iset s360-base
    mnemonics A AH AL ALR AR BAL BALR BC BCR BCT BCTR BXH BXLE C CH CL CLC CLI CLR CR 
    mnemonics CVB CVD D DIAG DR EX IC L LA LCR LH LM LNR LPR LPSW LR LTR 
    mnemonics M MH MR MVC MVI MVN MVO MVZ N NC NI NR O OC OI OR PACK S SH SL
    mnemonics SLA SLDA SLDL SLL SLR SPM SR SRA SRDA SRDL SRL SSM ST STC STH STM SVC
    mnemonics TM TR TRT TS UNPK X XC XI XR

iset s360-extended
    mnemonics B BE BER BH BHR BL BLR BM BMR BNE BNER BNH BNHR BNL BNLR BNM BNMR  
    mnemonics BNO BNOR BNP BNPR BNZ BNZR BO BOR BP BPR BR BZ BZR NOP NOPR


# Notes about S/360 I/O Instructions
#
# Different instruction sets for I/O are used by some S/360 models. The instruction
# mnemonic SIO is used to define different machine instructions depending upon the
# model involved.  To facilitate this variety of instructions, I/O related instructions
# are separated as different features to allow specific models to utilize different
# I/O instructions.  These features are not explicitly recognized by the S/360 family
# of systems, but is indirectly implied based upon the variations encountered.

inst CIO    9B   RSA            # CONTROL IO (360-20 only)          DA,FS,B1(D1)
inst HIO    9E00 S0      P      # HALT IO
inst SIO    9C00 S0      P      # START IO
inst TCH    9F00 S0      P      # TEST CHANNEL
inst TIO    9D00 S0      P      # TEST IO
inst TIOB   9A   RSA            # TEST IO AND BRANCH (360-20 only)  DA,FS,B1(D1)
inst XIO    D0   SS20           # TRANSFER IO (360-20 only)         DA,FS,B1(D1),B2(D2)

iset s360-io
    mnemonics HIO SIO TCH TIO

iset s360-20-io
    mnemonics CIO TIOB XIO


# PROCESSOR SPECIFIC INSTRUCTIONS 
inst BAS    4D   RXA            # 2020 2067        BRANCH AND STORE
inst BASR   0D   RR             # 2020 2067        BRANCH AND STORE
inst HPR    99   S0             # 2020             HALT AND PROCEED
inst LMC    B8   RSA     P      #      2067        LOAD MULTIPLE CONTROL
inst LRA    B1   RXA     P      #      2067        LOAD REAL ADDRESS
inst SION   A5   RSA     P      #           NSSC2  START IO
inst SPSW   81   S0             # 2020             SET PROGRAM STATUS WORD
inst STMC   B0   RSA     P      #      2067        STORE MULTIPLE CONTROL
