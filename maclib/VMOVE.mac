.* Copyright (C) 2020 Harold Grovesteen
.*
.* This file is part of SATK.
.*
.*     SATK is free software: you can redistribute it and/or modify
.*     it under the terms of the GNU General Public License as published by
.*     the Free Software Foundation, either version 3 of the License, or
.*     (at your option) any later version.
.*
.*     SATK is distributed in the hope that it will be useful,
.*     but WITHOUT ANY WARRANTY; without even the implied warranty of
.*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.*     GNU General Public License for more details.
.*
.*     You should have received a copy of the GNU General Public License
.*     along with SATK.  If not, see <http://www.gnu.org/licenses/>.

         MACRO
&LABEL   VMOVE &R1,&R2,&DSTRCT=
.* This macro performs a variable length byte move.  It uses MVCL when
.* available.  It emulates to a degree the MVCL instruction when not available.
.* The macro does not support any clearing of the destination field, but it 
.* does support the variable length move.  

.* VMOVE does not use the register pairs in exactly the same way as does MVCL 
.* nor does it intentionally set the condition code.  The condition
.* code should be considered as undefined after this macro.
.*
.* VMOVE requires two positional parameters.  In each case the positional
.* parameter is referring to an even/odd register pair.  The contents of
.* &R1, &R2 and R2+1 must be established by the program before using the VMOVE
.* macro.  The contents of &R1+1 will be established by the macro depending
.* upon whether the MVCL instruction is used or not.
.*
.* Program register usage required when using the VMOVE macro:
.*   &R1   - The destination starting address
.*   &R2   - The source starting address
.*   &R2+1 - The total length being moved, decremented on each cycle.
.*           When &R1+1 is less than or equal to the remaining length to move, 
.*           the variable move has only its final cycle to execute when MVCL
.*           is not used.  In this case, register R1+1 will not be zero
.*           at the termination of VMOVE.  The contents should be considered
.*           unpredictable.
.*
.* Register usage controled by the macro
.*   &R1+1 - For non-MVCL instruction usage (S/360)
.*             The decrement value (X'100').  Remains constant during the
.*             execution of VMOVE.  
.*           For MVCL instruction usage (all other architectures)
.*             The total length being 
.*             moved by MVCL and decremented on each MVCL cycle.  Initially the
.*             same as R2+1.
.*
.* Optional keyword parameter.  Ignored if MVCL not in use.
.*   &DSTRCT  The label to which control is passed if MVCL detects destructive
.*            overlap.  If omitted, the MVCL is not checked for destructive
.*            overlap.
         GBLA  &ARCHLVL
         AIF   (&ARCHLVL GT 0).ARCHOK
         MNOTE 1,'VMOVE - ARCHLVL MUST PRECEDE THIS MACRO'
         MEXIT
.ARCHOK  ANOP
         AIF   (&ARCHLVL EQ 1).NOMVCL
         LR    &R1+1,&R2+1       Same size to the receiving location
         MVCL  &R1,&R2           Move directed record
         AIF   ('&DSTRCT' EQ '').NODST
         $BC   B'0001',&DSTRCT   Destructive overlap detected (CC=3), quit
.NODST   ANOP
         MEXIT
.NOMVCL  ANOP
&LABEL   SR    &R1+1,&R1+1         Clear the decrement value
         LA    &R1+1,256           Maximum bytes to move on one cycle
VMVC&SYSNDX CR &R2+1,&R1+1         Are we almost done (R2+1 <= 256)?
         BNH   VMVE&SYSNDX         ..Yes, just do the last mvc
         MVC   0(256,&R1),0(&R2)   Move 256 bytes
         ALR   &R1,&R1+1           Increment the destination address by 256
         ALR   &R2,&R1+1           Increment the source address by 256
         SR    &R2+1,&R1+1         Decrenent the remaining byte count by 256
         BP    VMVC&SYSNDX         ..If >0, more bytes to move, see if last
         BZ    VMVX&SYSNDX         ..Yes, done with the move if zero
         DC    H'0'  If <0 or overflow, something went wrong
VMVE&SYSNDX DS 0H   This is the last (or only) move
         BCTR  &R2+1,0             Decrement the remainder count by 1 for MVC
         EX    &R2+1,VMVM&SYSNDX   Move the last chunk
         B     VMVX&SYSNDX         Branch around the executed MVC
VMVM&SYSNDX MVC 0(1,&R1),0(&R2)     Move the last chunk
VMVX&SYSNDX DS 0H   Variable move complete
         MEND
